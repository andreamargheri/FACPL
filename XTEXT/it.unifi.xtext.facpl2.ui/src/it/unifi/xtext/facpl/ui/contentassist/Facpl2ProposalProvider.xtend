/*
 * generated by Xtext
 */
package it.unifi.xtext.facpl.ui.contentassist

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class Facpl2ProposalProvider extends AbstractFacpl2ProposalProvider {
	
	@Inject IImageHelper imageHelper;


	//policySet
	override complete_PolicySet(EObject model, RuleCall ruleCall, 
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_BooleanLiteral(model, ruleCall, context, acceptor);

		acceptor.accept(createCompletionProposal(
				"PolicySet NamePolicySet { deny-overrides-all" +
				" \n \t " +
				"policies: \n"
				+ "\t PolicySet NamePolicy { deny-overrides-greedy \n " +
				"\t\t target: equal(\"value\",category/id) \n"
				+ "\t\t " +
				"policies: \n \t\t \t Rule ruleName (deny) \n" +
				"\t\t obl: [permit M log(system/id)]} \n " +
				"\t obl: \n }", 
				"PolicySet: template", imageHelper.getImage("red.png")
				, context));

	}
	
	//rule 
	override complete_Rule(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_Rule(model, ruleCall, context, acceptor);
		acceptor.accept(createCompletionProposal("Rule ruleName (permit) \n",
				"Rule: template", imageHelper.getImage("red.png")
				, context));
	}

	//literals
	override complete_BooleanLiteral(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_BooleanLiteral(model, ruleCall, context, acceptor);

		acceptor.accept(createCompletionProposal("true", "Boolean:true", imageHelper.getImage("blue.png")
				, context));
		acceptor.accept(createCompletionProposal("false", "Boolean:false",imageHelper.getImage("blue.png")
				, context));

	}
	
	override complete_DateLiteral(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DateLiteral(model, ruleCall, context, acceptor);

		acceptor.accept(createCompletionProposal("2015/10/22", "Date: yyyy/MM/dd",imageHelper.getImage("blue.png")
				, context));

	}

	override complete_TimeLiteral(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DateLiteral(model, ruleCall, context, acceptor);

		acceptor.accept(createCompletionProposal("20:01:22", "Time: HH:mm:ss",imageHelper.getImage("blue.png")
				, context));
	}
	
	override complete_IntLiteral(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DateLiteral(model, ruleCall, context, acceptor);

		acceptor.accept(createCompletionProposal("5", "Numeric: 0..9,0..9",imageHelper.getImage("blue.png")
				, context));

	}

	override complete_StringLiteral(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DateLiteral(model, ruleCall, context, acceptor);

		acceptor.accept(createCompletionProposal("\"Value\"", "String: \"a..z\"",imageHelper.getImage("blue.png")
				, context));

	}


	override complete_INT(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//super.complete_INT(model, ruleCall, context, acceptor)
	}
	
	override complete_STRING_O(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//super.complete_STRING_O(model, ruleCall, context, acceptor)
	}
	
	override complete_STRING(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//super.complete_STRING(model, ruleCall, context, acceptor)
	}

	override complete_AttributeReq(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_AttributeReq(model, ruleCall, context, acceptor);

		acceptor.accept(createCompletionProposal("( category/id , \"value\" )","FACPL: Attribute pair",imageHelper.getImage("green.png")
				, context));
	}

	//import
	override complete_Import(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_Import(model, ruleCall, context, acceptor);
		acceptor.accept(createCompletionProposal("import \"ImportFile.fpl\"","FACPL: Import",imageHelper.getImage("green.png")
				, context));

	}

	//structured name
	override complete_AttributeName(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_AttributeName(model, ruleCall, context, acceptor);
		acceptor.accept(createCompletionProposal("category/id","Attribute Name:  category/id",imageHelper.getImage("green.png")
				, context));
		acceptor.accept(createCompletionProposal("envirnoment/date","Structured Name:  date",imageHelper.getImage("green.png")
				, context));
		acceptor.accept(createCompletionProposal("envirnoment/time","Structured Name:  time",imageHelper.getImage("green.png")
				, context));
	}
	
	
}
