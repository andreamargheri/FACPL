/*
 * generated by Xtext
 */
package it.unifi.xtext.facpl.ui.outline

import com.google.inject.Inject
import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.ui.IImageHelper
import it.unifi.xtext.facpl.facpl2.FacplPolicy
import it.unifi.xtext.facpl.facpl2.PEPAlg
import it.unifi.xtext.facpl.facpl2.Rule
import it.unifi.xtext.facpl.facpl2.MainFacpl
import it.unifi.xtext.facpl.facpl2.Import
import it.unifi.xtext.facpl.facpl2.Request
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import it.unifi.xtext.facpl.facpl2.Facpl
import it.unifi.xtext.facpl.facpl2.Facpl2Package
import org.eclipse.xtext.ui.editor.outline.impl.EStructuralFeatureNode
import it.unifi.xtext.facpl.facpl2.AbstractPolicyIncl
import it.unifi.xtext.facpl.facpl2.PolicySet
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import it.unifi.xtext.facpl.facpl2.FunctionDeclaration

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class Facpl2OutlineTreeProvider extends org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider {

	@Inject IImageHelper imageHelper;

	def Image _image(FacplPolicy e) {
		return imageHelper.getImage("policies.gif");
	}

	def Image _image(PEPAlg s) {
		return imageHelper.getImage("policies.gif");
	}

	def Image _image(Rule e) {
		return imageHelper.getImage("rule.gif");
	}

	def Image _image(MainFacpl e) {
		return imageHelper.getImage("main.gif");
	}

	def Image _image(FunctionDeclaration e) {
		return imageHelper.getImage("main.gif");
	}

	def Image _image(Import e) {
		return imageHelper.getImage("Import.gif");
	}

	def Image _image(Request e) {
		return imageHelper.getImage("Property.gif");
	}

	def _createChildren(DocumentRootNode parentNode, Facpl facpl) {
		// import
		if (facpl.getImportEl() != null) {
			for (Import i : facpl.getImportEl()) {
				createEStructuralFeatureNode(parentNode, i, Facpl2Package.Literals.IMPORT__IMPORT_URI, _image(i),
					"imp : " + i.getImportURI(), true);
			}
		}
		// Request
		if (facpl.getRequests() != null) {
			for (Request r : facpl.getRequests()) {
				createEStructuralFeatureNode(parentNode, r, Facpl2Package.Literals.REQUEST__NAME, _image(r),
					"req : " + r.getName(), true);
			}
		}

		// function declaration
		if (facpl.declarations != null) {
			for (f : facpl.declarations) {
				createEStructuralFeatureNode(parentNode, f, Facpl2Package.Literals.FUNCTION__FUNCTION_ID, _image(f),
					"fun :" + f.name, true);
			}
		}

		// Main
		if (facpl.getMain() != null) {

			var EStructuralFeatureNode main = createEStructuralFeatureNode(parentNode, facpl.getMain(),
				Facpl2Package.Literals.MAIN_FACPL__EXT_INDET, _image(facpl.getMain()), "main ", true);

			if (facpl.getMain().getPaf() != null) {
				if (facpl.getMain().getPaf().getPdp() != null) {
					for (AbstractPolicyIncl pol : facpl.getMain().getPaf().getPdp().getPolSet()) {

						if (pol.getNewPolicy() != null) {

							if (pol.getNewPolicy() instanceof PolicySet) {
								createPolicySet(main, pol.getNewPolicy() as PolicySet);

							}
							if (pol.getNewPolicy() instanceof Rule) {

								createPolicySet(main, pol.getNewPolicy() as Rule);

							}
						}

						if (pol.getRefPol() != null) {
							createEStructuralFeatureNode(main, pol.getRefPol(),
								Facpl2Package.Literals.FACPL_POLICY__NAME, _image(pol.getRefPol()),
								"ref-pol : " + pol.getRefPol().getName(), false);
						}

					}
				}

			}

		}

		// Policies
		if (facpl.getPolicies() != null) {
			for (FacplPolicy pol : facpl.getPolicies()) {

				if (pol instanceof PolicySet) {

					createPolicySet(parentNode, pol as PolicySet);
				}
				if (pol instanceof Rule) {

					createPolicySet(parentNode, pol as Rule);
				}

			}
		}
	}

	def createPolicySet(IOutlineNode parentNode, PolicySet pol) {

		var EStructuralFeatureNode polSetNode = createEStructuralFeatureNode(parentNode, pol,
			Facpl2Package.Literals.FACPL_POLICY__NAME, _image(pol), "pSet : " + pol.getName(), false);

		createEStructuralFeatureNode(polSetNode, pol, Facpl2Package.Literals.FACPL_POLICY__TARGET, null, "target",
			true);

		// creating the node of the internal one
		for (AbstractPolicyIncl el : pol.getPolicies()) {
			if (el.getNewPolicy() != null) {

				if (el.getNewPolicy() instanceof PolicySet) {
					createPolicySet(polSetNode, el.getNewPolicy() as PolicySet);

				}
				if (el.getNewPolicy() instanceof Rule) {

					createPolicySet(polSetNode, el.getNewPolicy() as Rule);

				}
			}

			if (el.getRefPol() != null) {
				createEStructuralFeatureNode(parentNode, el.getRefPol(), Facpl2Package.Literals.FACPL_POLICY__NAME,
					_image(el.getRefPol()), "ref-pol : " + el.getRefPol().getName(), false);
			}
		}

		createEStructuralFeatureNode(polSetNode, pol, Facpl2Package.Literals.FACPL_POLICY__OBL, null, "obligation",
			true);

	}

	def createPolicySet(IOutlineNode parentNode, Rule pol) {

		var EStructuralFeatureNode polNode = createEStructuralFeatureNode(parentNode, pol,
			Facpl2Package.Literals.FACPL_POLICY__NAME, _image(pol), "rul : " + pol.getName(), false);

	}

	def boolean _isLeaf(Request request) {
		return true;
	}

	def boolean _isLeaf(Rule request) {
		return true;
	}

	def boolean _isLeaf(PolicySet request) {
		return true;
	}

	def boolean _isLeaf(FacplPolicy request) {
		return true;
	}

}
