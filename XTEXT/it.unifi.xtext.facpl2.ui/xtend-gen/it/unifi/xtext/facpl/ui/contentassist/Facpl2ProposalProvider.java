/**
 * generated by Xtext
 */
package it.unifi.xtext.facpl.ui.contentassist;

import com.google.inject.Inject;
import it.unifi.xtext.facpl.ui.contentassist.AbstractFacpl2ProposalProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.IImageHelper;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class Facpl2ProposalProvider extends AbstractFacpl2ProposalProvider {
  @Inject
  private IImageHelper imageHelper;
  
  @Override
  public void complete_PolicySet(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_BooleanLiteral(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("red.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(
      (((((((("PolicySet NamePolicySet { deny-overrides-all" + 
        " \n \t ") + 
        "policies: \n") + "\t PolicySet NamePolicy { deny-overrides-greedy \n ") + 
        "\t\t target: equal(\"value\",category/id) \n") + "\t\t ") + 
        "policies: \n \t\t \t Rule ruleName (deny) \n") + 
        "\t\t obl: [permit M log(system/id)]} \n ") + 
        "\t obl: \n }"), 
      "PolicySet: template", _image, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void complete_Rule(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_Rule(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("red.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("Rule ruleName (permit) \n", 
      "Rule: template", _image, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void complete_BooleanLiteral(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_BooleanLiteral(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("blue.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("true", "Boolean:true", _image, context);
    acceptor.accept(_createCompletionProposal);
    Image _image_1 = this.imageHelper.getImage("blue.png");
    ICompletionProposal _createCompletionProposal_1 = this.createCompletionProposal("false", "Boolean:false", _image_1, context);
    acceptor.accept(_createCompletionProposal_1);
  }
  
  @Override
  public void complete_DateLiteral(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_DateLiteral(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("blue.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("2015/10/22", "Date: yyyy/MM/dd", _image, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void complete_TimeLiteral(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_DateLiteral(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("blue.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("20:01:22", "Time: HH:mm:ss", _image, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void complete_IntLiteral(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_DateLiteral(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("blue.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("5", "Numeric: 0..9,0..9", _image, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void complete_StringLiteral(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_DateLiteral(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("blue.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("\"Value\"", "String: \"a..z\"", _image, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void complete_INT(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
  }
  
  @Override
  public void complete_STRING_O(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
  }
  
  @Override
  public void complete_STRING(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
  }
  
  @Override
  public void complete_AttributeReq(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_AttributeReq(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("green.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("( category/id , \"value\" )", "FACPL: Attribute pair", _image, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void complete_Import(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_Import(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("green.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("import \"ImportFile.fpl\"", "FACPL: Import", _image, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void complete_AttributeName(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_AttributeName(model, ruleCall, context, acceptor);
    Image _image = this.imageHelper.getImage("green.png");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("category/id", "Attribute Name:  category/id", _image, context);
    acceptor.accept(_createCompletionProposal);
    Image _image_1 = this.imageHelper.getImage("green.png");
    ICompletionProposal _createCompletionProposal_1 = this.createCompletionProposal("envirnoment/date", "Structured Name:  date", _image_1, context);
    acceptor.accept(_createCompletionProposal_1);
    Image _image_2 = this.imageHelper.getImage("green.png");
    ICompletionProposal _createCompletionProposal_2 = this.createCompletionProposal("envirnoment/time", "Structured Name:  time", _image_2, context);
    acceptor.accept(_createCompletionProposal_2);
  }
}
