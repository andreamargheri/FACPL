/*
 * generated by Xtext
 */
package it.unifi.xtext.facpl.formatting

import com.google.inject.Inject
import it.unifi.xtext.facpl.services.Facpl2GrammarAccess
import java.util.List
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.eclipse.xtext.util.Pair

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class Facpl2Formatter extends AbstractDeclarativeFormatter {

	@Inject extension Facpl2GrammarAccess
	
	override protected void configureFormatting(FormattingConfig c) {

		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
		
		
		var Facpl2GrammarAccess f =  getGrammarAccess() as Facpl2GrammarAccess

		c.setAutoLinewrap(120);	
		c.setLinewrap(1, 2, 3).around(f.getImportRule());
		c.setLinewrap(1, 2, 3).around(f.getMainFacplRule());
		
		c.setLinewrap(1, 2, 2).after(f.getPDPRule());
		c.setLinewrap(1, 1, 2).after(f.getPEPAlgRule());

		c.setLinewrap(1, 1, 1).after(f.getAlgRule());
//		c.setLinewrap(1, 1, 1).after(f.getAlgRule());
//		c.setLinewrap(1, 1, 1).after(f.getEffectRule());
				
		//Indentation PolicySet, Policy e Rule
		c.setLinewrap(1, 1, 2).around(f.getPolicySetRule());
		
		var List<Pair<Keyword,Keyword>> pairsPolSet = f.findKeywordPairs("{", "}");
		
		for (Pair<Keyword, Keyword> pair : pairsPolSet) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}
		
		c.setLinewrap(1, 1, 2).around(f.getRuleRule());
		var List<Pair<Keyword,Keyword>> pairsRule = f.findKeywordPairs("(", ")");
		for (Pair<Keyword, Keyword> pair : pairsRule) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}

		//c.setLinewrap(1,1,2).before(f.getExpressionRule());
		//c.setLinewrap(1,1,2).after(f.getExpressionRule());
		var List<Pair<Keyword,Keyword>> pairsTarget = f.findKeywordPairs("target:", " ");
		for (Pair<Keyword, Keyword> pair : pairsTarget) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
			c.setLinewrap(1,1,2).after(pair.getSecond());
		}

		var List<Pair<Keyword,Keyword>> pairsPolicies = f.findKeywordPairs("policies:", " ");
		for (Pair<Keyword, Keyword> pair : pairsPolicies) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
			c.setLinewrap(1,1,2).after(pair.getSecond());
			c.setLinewrap(1,1,2).before(pair.getFirst());
		}

		
		c.setLinewrap().around(f.getObligationRule());
		var List<Pair<Keyword,Keyword>> pairsObligation = f.findKeywordPairs("obl:", " ");
		for (Pair<Keyword, Keyword> pair : pairsObligation) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}

		//linewrap main attributes
		var List<Pair<Keyword,Keyword>> pairsMain = f.findKeywordPairs("Extended Indeterminate", ";");
		pairsMain.addAll(f.findKeywordPairs("Java Package", ";"));
		pairsMain.addAll(f.findKeywordPairs("Requests To Evaluate", ";"));
		
		for (Pair<Keyword,Keyword> p : pairsMain) {
			c.setLinewrap(1, 1, 2).after(p.getSecond());
		}
//		
//		List<Keyword> main = f.findKeywords("CombinedDecision");
//		for (Keyword p : main) {
//			c.setLinewrap(1, 1, 1).after(p);
//		}
		
//		//policies and rules
//		List<Pair<Keyword,Keyword>> pairsPolicies = f.findKeywords("Policy", ">");
//		for (Pair<Keyword, Keyword> pair : pairsPolicies) {
//			c.setIndentation(pair.getFirst(), pair.getSecond());
//		}
//
//		List<Pair<Keyword,Keyword>> pairsPolicySet = f.findKeywordPairs("PolicySet", "}");
//		for (Pair<Keyword, Keyword> pair : pairsPolicySet) {
//			c.setIndentation(pair.getFirst(), pair.getSecond());
//		}
//		
//		List<Pair<Keyword,Keyword>> pairsRules = f.findKeywordPairs("Rule", ")");
//		for (Pair<Keyword, Keyword> pair : pairsRules) {
//			c.setIndentation(pair.getFirst(), pair.getSecond());
//		}
	
		//attribute		
		//c.setLinewrap().around(f.getAttributeRule());
	}
}
