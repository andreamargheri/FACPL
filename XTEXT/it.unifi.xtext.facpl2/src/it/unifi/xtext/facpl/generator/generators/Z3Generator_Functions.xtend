package it.unifi.xtext.facpl.generator.generators

import it.unifi.xtext.facpl.facpl2.funID

class Z3Generator_Functions {
	
	def static getBoolFunctions() 
	'''
	(define-fun isFalse ((x (TValue Bool))) Bool
		(ite (= x (mk-val false false false)) true false)
	)
	
	(define-fun isTrue ((x (TValue Bool))) Bool
		(ite (= x (mk-val true false false)) true false)
	)
	
	(define-fun isBool ((x (TValue Bool))) Bool
			(ite (or (isFalse x) (isTrue x)) true false)
	)
	
	(define-fun FAnd ((x (TValue Bool)) (y (TValue Bool))) (TValue Bool)
		(ite (and (isTrue x) (isTrue y))
			(mk-val true false false)
			(ite (or (isFalse x) (isFalse y))
				(mk-val false false false)
				(ite (or (err x) (err y))
					(mk-val false false true)
					(mk-val false true false)
				)
			)
		)
	)
	
	(define-fun FOr ((x (TValue Bool)) (y (TValue Bool))) (TValue Bool)
		(ite (or (isTrue x) (isTrue y))
			(mk-val true false false)
			(ite (or (err x) (err y))
				(mk-val false false true)
				(ite (or (bot x) (bot y))
					(mk-val false true true)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun FNot ((x (TValue Bool))) (TValue Bool)
		(ite (isTrue x)
			(mk-val false false false)
			(ite (isFalse x)
				(mk-val true false false)
				(ite (bot x)
					(mk-val false true false)
					(mk-val false false true)
				)
			)
		)
	)
	'''
	
	def static getEqualityFunctions() '''
	(define-fun «funID.EQUAL.toString»Bool ((x (TValue Bool)) (y (TValue Bool))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (= (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.EQUAL.toString»Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (= (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.EQUAL.toString»Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (= (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	'''
	
	def static getIntFunctions() '''
	
	(define-fun isValInt ((x (TValue Int))) Bool
		(ite (and (not (bot x)) (not (err x))) true false)
	)
	
	(define-fun «funID.LESS.toString.replaceAll('-','')»Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (< (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.LESS_EQ.toString.replaceAll('-','')»Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (<= (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.GREATER.toString.replaceAll('-','')»Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (> (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.GREATER_EQ.toString.replaceAll('-','')»Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (>= (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.ADD.toString»Int ((x (TValue Int)) (y (TValue Int))) (TValue Int)
		(ite (and (isValInt x) (isValInt y))
			(mk-val (+ (val x) (val y)) false false)
			(ite (or (err x) (err y))
				(mk-val 0 false true)
				(mk-val 0 true false)
			)
		)
	)
	
	(define-fun «funID.SUBTRACT.toString»Int ((x (TValue Int)) (y (TValue Int))) (TValue Int)
		(ite (and (isValInt x) (isValInt y))
			(mk-val (- (val x) (val y)) false false)
			(ite (or (err x) (err y))
				(mk-val 0 false true)
				(mk-val 0 true false)
			)
		)
	)
	
	
	(define-fun «funID.MULTIPLY.toString»Int ((x (TValue Int)) (y (TValue Int))) (TValue Int)
		(ite (and (isValInt x) (isValInt y))
			(mk-val (* (val x) (val y)) false false)
			(ite (or (err x) (err y))
				(mk-val 0 false true)
				(mk-val 0 true false)
			)
		)
	)
	
	
	(define-fun «funID.DIVIDE.toString»Int ((x (TValue Int)) (y (TValue Int))) (TValue Int)
		(ite (and (isValInt x) (isValInt y))
			(mk-val (div (val x) (val y)) false false)
			(ite (or (err x) (err y))
				(mk-val 0 false true)
				(mk-val 0 true false)
			)
		)
	)
	'''
		
	def static getRealFunctions() '''
	
	(define-fun isValReal ((x (TValue Real))) Bool
		(ite (and (not (bot x)) (not (err x))) true false)
	)
	
	(define-fun «funID.LESS.toString.replaceAll('-','')»Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (< (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.LESS_EQ.toString.replaceAll('-','')»Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (<= (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.GREATER.toString.replaceAll('-','')»Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (> (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.GREATER_EQ.toString.replaceAll('-','')»Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)
		(ite (or (err x) (err y))
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (>= (val x) (val y))
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.ADD.toString»Real ((x (TValue Real)) (y (TValue Real))) (TValue Real)
		(ite (and (isValReal x) (isValReal y))
			(mk-val (+ (val x) (val y)) false false)
			(ite (or (err x) (err y))
				(mk-val 0.0 false true)
				(mk-val 0.0 true false)
			)
		)
	)
	
	(define-fun «funID.SUBTRACT.toString»Real ((x (TValue Real)) (y (TValue Real))) (TValue Real)
		(ite (and (isValReal x) (isValReal y))
			(mk-val (- (val x) (val y)) false false)
			(ite (or (err x) (err y))
				(mk-val 0.0 false true)
				(mk-val 0.0 true false)
			)
		)
	)
	
	
	(define-fun «funID.MULTIPLY.toString»Real ((x (TValue Real)) (y (TValue Real))) (TValue Real)
		(ite (and (isValReal x) (isValReal y))
			(mk-val (* (val x) (val y)) false false)
			(ite (or (err x) (err y))
				(mk-val 0.0 false true)
				(mk-val 0.0 true false)
			)
		)
	)
	
	
	(define-fun «funID.DIVIDE.toString»Real ((x (TValue Real)) (y (TValue Real))) (TValue Real)
		(ite (and (isValReal x) (isValReal y))
			(mk-val (/ (val x) (val y)) false false)
			(ite (or (err x) (err y))
				(mk-val 0.0 false true)
				(mk-val 0.0 true false)
			)
		)
	)
	'''
	
	def static getBagFunctions() '''
	(define-fun isValBagInt ((x (TValue (Bag Int)))) Bool
		(ite (and (not (bot x)) (not (err x))) true false)
	)
	
	(define-fun isValBagReal ((x (TValue (Bag Real)))) Bool
		(ite (and (not (bot x)) (not (err x))) true false)
	)
	
	(define-fun isValBagBool ((x (TValue (Bag Bool)))) Bool
		(ite (and (not (bot x)) (not (err x))) true false)
	)
	
	(define-fun «funID.IN.toString»Bool ((x (TValue Bool)) (y (TValue (Bag Bool)))) (TValue Bool)
		(ite (or (err x)(err y)) 
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (exists ((i Int))
							(= (val x) (select (val y) i))
					  )
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.IN.toString»Real ((x (TValue Real)) (y (TValue (Bag Real)))) (TValue Bool)
		(ite (or (err x)(err y)) 
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (exists ((i Int))
							(= (val x) (select (val y) i))
					  )
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	
	(define-fun «funID.IN.toString»Int ((x (TValue Int)) (y (TValue (Bag Int)))) (TValue Bool)
		(ite (or (err x)(err y)) 
			(mk-val false false true)
			(ite (or (bot x) (bot y))
				(mk-val false true false)
				(ite (exists ((i Int))
							(= (val x) (select (val y) i))
					  )
					(mk-val true false false)
					(mk-val false false false)
				)
			)
		)
	)
	'''
	
}