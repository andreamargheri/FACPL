/*
 * generated by Xtext
 */
package it.unifi.xtext.facpl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Facpl2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FacplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Facpl");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cImportElAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cImportElImportParserRuleCall_0_0 = (RuleCall)cImportElAssignment_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cDeclarationsFunctionDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Assignment cPoliciesAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cPoliciesPolicySetParserRuleCall_2_0 = (RuleCall)cPoliciesAssignment_2.eContents().get(0);
		private final Assignment cRequestsAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cRequestsRequestParserRuleCall_3_0 = (RuleCall)cRequestsAssignment_3.eContents().get(0);
		private final Assignment cMainAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cMainMainFacplParserRuleCall_4_0 = (RuleCall)cMainAssignment_4.eContents().get(0);
		
		//Facpl:
		//	importEl+=Import* & declarations+=FunctionDeclaration* & policies+=PolicySet* & requests+=Request* & main=MainFacpl?;
		@Override public ParserRule getRule() { return rule; }

		//importEl+=Import* & declarations+=FunctionDeclaration* & policies+=PolicySet* & requests+=Request* & main=MainFacpl?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//importEl+=Import*
		public Assignment getImportElAssignment_0() { return cImportElAssignment_0; }

		//Import
		public RuleCall getImportElImportParserRuleCall_0_0() { return cImportElImportParserRuleCall_0_0; }

		//declarations+=FunctionDeclaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//FunctionDeclaration
		public RuleCall getDeclarationsFunctionDeclarationParserRuleCall_1_0() { return cDeclarationsFunctionDeclarationParserRuleCall_1_0; }

		//policies+=PolicySet*
		public Assignment getPoliciesAssignment_2() { return cPoliciesAssignment_2; }

		//PolicySet
		public RuleCall getPoliciesPolicySetParserRuleCall_2_0() { return cPoliciesPolicySetParserRuleCall_2_0; }

		//requests+=Request*
		public Assignment getRequestsAssignment_3() { return cRequestsAssignment_3; }

		//Request
		public RuleCall getRequestsRequestParserRuleCall_3_0() { return cRequestsRequestParserRuleCall_3_0; }

		//main=MainFacpl?
		public Assignment getMainAssignment_4() { return cMainAssignment_4; }

		//MainFacpl
		public RuleCall getMainMainFacplParserRuleCall_4_0() { return cMainMainFacplParserRuleCall_4_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		////Import
		//Import:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class MainFacplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.MainFacpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPASKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtendedIndeterminateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExtIndetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtIndetBooleanLiteralParserRuleCall_4_0 = (RuleCall)cExtIndetAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cJavaPackageKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cGenPackageAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cGenPackageSTRINGTerminalRuleCall_6_2_0 = (RuleCall)cGenPackageAssignment_6_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRequestsToEvaluateKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Assignment cRefRequestAssignment_7_2_0 = (Assignment)cGroup_7_2.eContents().get(0);
		private final CrossReference cRefRequestRequestCrossReference_7_2_0_0 = (CrossReference)cRefRequestAssignment_7_2_0.eContents().get(0);
		private final RuleCall cRefRequestRequestIDTerminalRuleCall_7_2_0_0_1 = (RuleCall)cRefRequestRequestCrossReference_7_2_0_0.eContents().get(1);
		private final Group cGroup_7_2_1 = (Group)cGroup_7_2.eContents().get(1);
		private final Keyword cCommaKeyword_7_2_1_0 = (Keyword)cGroup_7_2_1.eContents().get(0);
		private final Assignment cRefRequestAssignment_7_2_1_1 = (Assignment)cGroup_7_2_1.eContents().get(1);
		private final CrossReference cRefRequestRequestCrossReference_7_2_1_1_0 = (CrossReference)cRefRequestAssignment_7_2_1_1.eContents().get(0);
		private final RuleCall cRefRequestRequestIDTerminalRuleCall_7_2_1_1_0_1 = (RuleCall)cRefRequestRequestCrossReference_7_2_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cPafAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPafPAFParserRuleCall_8_0 = (RuleCall)cPafAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////Main
		//MainFacpl:
		//	'PAS' '{' 'Extended Indeterminate' ':' extIndet=BooleanLiteral ';' ('Java Package' ':' genPackage=STRING ';')?
		//	('Requests To Evaluate' ':' (refRequest+=[Request] (',' refRequest+=[Request])*) ';') paf=PAF '}';
		@Override public ParserRule getRule() { return rule; }

		//'PAS' '{' 'Extended Indeterminate' ':' extIndet=BooleanLiteral ';' ('Java Package' ':' genPackage=STRING ';')?
		//('Requests To Evaluate' ':' (refRequest+=[Request] (',' refRequest+=[Request])*) ';') paf=PAF '}'
		public Group getGroup() { return cGroup; }

		//'PAS'
		public Keyword getPASKeyword_0() { return cPASKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//'Extended Indeterminate'
		public Keyword getExtendedIndeterminateKeyword_2() { return cExtendedIndeterminateKeyword_2; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//extIndet=BooleanLiteral
		public Assignment getExtIndetAssignment_4() { return cExtIndetAssignment_4; }

		//BooleanLiteral
		public RuleCall getExtIndetBooleanLiteralParserRuleCall_4_0() { return cExtIndetBooleanLiteralParserRuleCall_4_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//('Java Package' ':' genPackage=STRING ';')?
		public Group getGroup_6() { return cGroup_6; }

		//'Java Package'
		public Keyword getJavaPackageKeyword_6_0() { return cJavaPackageKeyword_6_0; }

		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//genPackage=STRING
		public Assignment getGenPackageAssignment_6_2() { return cGenPackageAssignment_6_2; }

		//STRING
		public RuleCall getGenPackageSTRINGTerminalRuleCall_6_2_0() { return cGenPackageSTRINGTerminalRuleCall_6_2_0; }

		//';'
		public Keyword getSemicolonKeyword_6_3() { return cSemicolonKeyword_6_3; }

		//('Requests To Evaluate' ':' (refRequest+=[Request] (',' refRequest+=[Request])*) ';')
		public Group getGroup_7() { return cGroup_7; }

		//'Requests To Evaluate'
		public Keyword getRequestsToEvaluateKeyword_7_0() { return cRequestsToEvaluateKeyword_7_0; }

		//':'
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }

		//(refRequest+=[Request] (',' refRequest+=[Request])*)
		public Group getGroup_7_2() { return cGroup_7_2; }

		//refRequest+=[Request]
		public Assignment getRefRequestAssignment_7_2_0() { return cRefRequestAssignment_7_2_0; }

		//[Request]
		public CrossReference getRefRequestRequestCrossReference_7_2_0_0() { return cRefRequestRequestCrossReference_7_2_0_0; }

		//ID
		public RuleCall getRefRequestRequestIDTerminalRuleCall_7_2_0_0_1() { return cRefRequestRequestIDTerminalRuleCall_7_2_0_0_1; }

		//(',' refRequest+=[Request])*
		public Group getGroup_7_2_1() { return cGroup_7_2_1; }

		//','
		public Keyword getCommaKeyword_7_2_1_0() { return cCommaKeyword_7_2_1_0; }

		//refRequest+=[Request]
		public Assignment getRefRequestAssignment_7_2_1_1() { return cRefRequestAssignment_7_2_1_1; }

		//[Request]
		public CrossReference getRefRequestRequestCrossReference_7_2_1_1_0() { return cRefRequestRequestCrossReference_7_2_1_1_0; }

		//ID
		public RuleCall getRefRequestRequestIDTerminalRuleCall_7_2_1_1_0_1() { return cRefRequestRequestIDTerminalRuleCall_7_2_1_1_0_1; }

		//';'
		public Keyword getSemicolonKeyword_7_3() { return cSemicolonKeyword_7_3; }

		//paf=PAF
		public Assignment getPafAssignment_8() { return cPafAssignment_8; }

		//PAF
		public RuleCall getPafPAFParserRuleCall_8_0() { return cPafPAFParserRuleCall_8_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecFunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeLiteralEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgsTypeLiteralEnumRuleCall_4_0 = (RuleCall)cArgsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgsTypeLiteralEnumRuleCall_5_1_0 = (RuleCall)cArgsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Function Declaration
		//FunctionDeclaration:
		//	'dec-fun' type=TypeLiteral name=ID "(" args+=TypeLiteral (',' args+=TypeLiteral)* ")";
		@Override public ParserRule getRule() { return rule; }

		//'dec-fun' type=TypeLiteral name=ID "(" args+=TypeLiteral (',' args+=TypeLiteral)* ")"
		public Group getGroup() { return cGroup; }

		//'dec-fun'
		public Keyword getDecFunKeyword_0() { return cDecFunKeyword_0; }

		//type=TypeLiteral
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeLiteral
		public RuleCall getTypeTypeLiteralEnumRuleCall_1_0() { return cTypeTypeLiteralEnumRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//args+=TypeLiteral
		public Assignment getArgsAssignment_4() { return cArgsAssignment_4; }

		//TypeLiteral
		public RuleCall getArgsTypeLiteralEnumRuleCall_4_0() { return cArgsTypeLiteralEnumRuleCall_4_0; }

		//(',' args+=TypeLiteral)*
		public Group getGroup_5() { return cGroup_5; }

		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//args+=TypeLiteral
		public Assignment getArgsAssignment_5_1() { return cArgsAssignment_5_1; }

		//TypeLiteral
		public RuleCall getArgsTypeLiteralEnumRuleCall_5_1_0() { return cArgsTypeLiteralEnumRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class PAFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.PAF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatusAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatusSTATUSParserRuleCall_0_0 = (RuleCall)cStatusAssignment_0.eContents().get(0);
		private final Keyword cPepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPepAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPepPEPAlgEnumRuleCall_2_0 = (RuleCall)cPepAssignment_2.eContents().get(0);
		private final Keyword cPdpKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPdpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPdpPDPParserRuleCall_4_0 = (RuleCall)cPdpAssignment_4.eContents().get(0);
		
		////PAF - Policy Authorisation Framework
		/// *
		// * 
		// * ROBA NUOVA
		// * 
		// * 
		// * / PAF:
		//	status=STATUS? 'pep:' pep=PEPAlg 'pdp:' pdp=PDP;
		@Override public ParserRule getRule() { return rule; }

		//status=STATUS? 'pep:' pep=PEPAlg 'pdp:' pdp=PDP
		public Group getGroup() { return cGroup; }

		//status=STATUS?
		public Assignment getStatusAssignment_0() { return cStatusAssignment_0; }

		//STATUS
		public RuleCall getStatusSTATUSParserRuleCall_0_0() { return cStatusSTATUSParserRuleCall_0_0; }

		//'pep:'
		public Keyword getPepKeyword_1() { return cPepKeyword_1; }

		//pep=PEPAlg
		public Assignment getPepAssignment_2() { return cPepAssignment_2; }

		//PEPAlg
		public RuleCall getPepPEPAlgEnumRuleCall_2_0() { return cPepPEPAlgEnumRuleCall_2_0; }

		//'pdp:'
		public Keyword getPdpKeyword_3() { return cPdpKeyword_3; }

		//pdp=PDP
		public Assignment getPdpAssignment_4() { return cPdpAssignment_4; }

		//PDP
		public RuleCall getPdpPDPParserRuleCall_4_0() { return cPdpPDPParserRuleCall_4_0; }
	}

	public class STATUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.STATUS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsAttributeDeclarationParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//STATUS:
		//	'status:' '[' elements+=AttributeDeclaration+ ']';
		@Override public ParserRule getRule() { return rule; }

		//'status:' '[' elements+=AttributeDeclaration+ ']'
		public Group getGroup() { return cGroup; }

		//'status:'
		public Keyword getStatusKeyword_0() { return cStatusKeyword_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//elements+=AttributeDeclaration+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//AttributeDeclaration
		public RuleCall getElementsAttributeDeclarationParserRuleCall_2_0() { return cElementsAttributeDeclarationParserRuleCall_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cTypeBooleanKeyword_0_0_0 = (Keyword)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cXAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cXBooleanLiteralParserRuleCall_0_3_0 = (RuleCall)cXAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTypeIntKeyword_1_0_0 = (Keyword)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cXAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cXIntLiteralParserRuleCall_1_3_0 = (RuleCall)cXAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTypeDateKeyword_2_0_0 = (Keyword)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cXAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Alternatives cXAlternatives_2_3_0 = (Alternatives)cXAssignment_2_3.eContents().get(0);
		private final RuleCall cXDateLiteralParserRuleCall_2_3_0_0 = (RuleCall)cXAlternatives_2_3_0.eContents().get(0);
		private final RuleCall cXTimeLiteralParserRuleCall_2_3_0_1 = (RuleCall)cXAlternatives_2_3_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cTypeFloatKeyword_3_0_0 = (Keyword)cTypeAssignment_3_0.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cXAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final Alternatives cXAlternatives_3_3_0 = (Alternatives)cXAssignment_3_3.eContents().get(0);
		private final RuleCall cXIntLiteralParserRuleCall_3_3_0_0 = (RuleCall)cXAlternatives_3_3_0.eContents().get(0);
		private final RuleCall cXDoubleLiteralParserRuleCall_3_3_0_1 = (RuleCall)cXAlternatives_3_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cTypeStringKeyword_4_0_0 = (Keyword)cTypeAssignment_4_0.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cXAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cXStringLiteralParserRuleCall_4_3_0 = (RuleCall)cXAssignment_4_3.eContents().get(0);
		
		//Attribute:
		//	type='boolean' name=ID '=' x=BooleanLiteral | type='int' name=ID '=' x=IntLiteral | type='date' name=ID '='
		//	x=(DateLiteral | TimeLiteral) | type='float' name=ID '=' x=(IntLiteral | DoubleLiteral) | type='string' name=ID '='
		//	x=StringLiteral;
		@Override public ParserRule getRule() { return rule; }

		//type='boolean' name=ID '=' x=BooleanLiteral | type='int' name=ID '=' x=IntLiteral | type='date' name=ID '='
		//x=(DateLiteral | TimeLiteral) | type='float' name=ID '=' x=(IntLiteral | DoubleLiteral) | type='string' name=ID '='
		//x=StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//type='boolean' name=ID '=' x=BooleanLiteral
		public Group getGroup_0() { return cGroup_0; }

		//type='boolean'
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//'boolean'
		public Keyword getTypeBooleanKeyword_0_0_0() { return cTypeBooleanKeyword_0_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//x=BooleanLiteral
		public Assignment getXAssignment_0_3() { return cXAssignment_0_3; }

		//BooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_0_3_0() { return cXBooleanLiteralParserRuleCall_0_3_0; }

		//type='int' name=ID '=' x=IntLiteral
		public Group getGroup_1() { return cGroup_1; }

		//type='int'
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//'int'
		public Keyword getTypeIntKeyword_1_0_0() { return cTypeIntKeyword_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//x=IntLiteral
		public Assignment getXAssignment_1_3() { return cXAssignment_1_3; }

		//IntLiteral
		public RuleCall getXIntLiteralParserRuleCall_1_3_0() { return cXIntLiteralParserRuleCall_1_3_0; }

		//type='date' name=ID '=' x=(DateLiteral | TimeLiteral)
		public Group getGroup_2() { return cGroup_2; }

		//type='date'
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }

		//'date'
		public Keyword getTypeDateKeyword_2_0_0() { return cTypeDateKeyword_2_0_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//x=(DateLiteral | TimeLiteral)
		public Assignment getXAssignment_2_3() { return cXAssignment_2_3; }

		//(DateLiteral | TimeLiteral)
		public Alternatives getXAlternatives_2_3_0() { return cXAlternatives_2_3_0; }

		//DateLiteral
		public RuleCall getXDateLiteralParserRuleCall_2_3_0_0() { return cXDateLiteralParserRuleCall_2_3_0_0; }

		//TimeLiteral
		public RuleCall getXTimeLiteralParserRuleCall_2_3_0_1() { return cXTimeLiteralParserRuleCall_2_3_0_1; }

		//type='float' name=ID '=' x=(IntLiteral | DoubleLiteral)
		public Group getGroup_3() { return cGroup_3; }

		//type='float'
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }

		//'float'
		public Keyword getTypeFloatKeyword_3_0_0() { return cTypeFloatKeyword_3_0_0; }

		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_3_2() { return cEqualsSignKeyword_3_2; }

		//x=(IntLiteral | DoubleLiteral)
		public Assignment getXAssignment_3_3() { return cXAssignment_3_3; }

		//(IntLiteral | DoubleLiteral)
		public Alternatives getXAlternatives_3_3_0() { return cXAlternatives_3_3_0; }

		//IntLiteral
		public RuleCall getXIntLiteralParserRuleCall_3_3_0_0() { return cXIntLiteralParserRuleCall_3_3_0_0; }

		//DoubleLiteral
		public RuleCall getXDoubleLiteralParserRuleCall_3_3_0_1() { return cXDoubleLiteralParserRuleCall_3_3_0_1; }

		//type='string' name=ID '=' x=StringLiteral
		public Group getGroup_4() { return cGroup_4; }

		//type='string'
		public Assignment getTypeAssignment_4_0() { return cTypeAssignment_4_0; }

		//'string'
		public Keyword getTypeStringKeyword_4_0_0() { return cTypeStringKeyword_4_0_0; }

		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }

		//x=StringLiteral
		public Assignment getXAssignment_4_3() { return cXAssignment_4_3; }

		//StringLiteral
		public RuleCall getXStringLiteralParserRuleCall_4_3_0() { return cXStringLiteralParserRuleCall_4_3_0; }
	}

	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.AttributeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttAttributeParserRuleCall_1_0 = (RuleCall)cAttAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AttributeDeclaration:
		//	'(' att=Attribute ')';
		@Override public ParserRule getRule() { return rule; }

		//'(' att=Attribute ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//att=Attribute
		public Assignment getAttAssignment_1() { return cAttAssignment_1; }

		//Attribute
		public RuleCall getAttAttributeParserRuleCall_1_0() { return cAttAttributeParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PepFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.PepFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameAddStatusKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAttAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_0_2_0 = (CrossReference)cAttAssignment_0_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_0_2_0_1 = (RuleCall)cAttAttributeCrossReference_0_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cValueIntLiteralParserRuleCall_0_4_0 = (RuleCall)cValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameAddStatusKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAttAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_1_2_0 = (CrossReference)cAttAssignment_1_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_1_2_0_1 = (RuleCall)cAttAttributeCrossReference_1_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cValueDoubleLiteralParserRuleCall_1_4_0 = (RuleCall)cValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNameSubStatusKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAttAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_2_2_0 = (CrossReference)cAttAssignment_2_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_2_2_0_1 = (RuleCall)cAttAttributeCrossReference_2_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cValueAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cValueIntLiteralParserRuleCall_2_4_0 = (RuleCall)cValueAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cNameSubStatusKeyword_3_0_0 = (Keyword)cNameAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAttAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_3_2_0 = (CrossReference)cAttAssignment_3_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cAttAttributeCrossReference_3_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cValueAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cValueDoubleLiteralParserRuleCall_3_4_0 = (RuleCall)cValueAssignment_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cNameDivStatusKeyword_4_0_0 = (Keyword)cNameAssignment_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAttAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_4_2_0 = (CrossReference)cAttAssignment_4_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cAttAttributeCrossReference_4_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cValueAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cValueIntLiteralParserRuleCall_4_4_0 = (RuleCall)cValueAssignment_4_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cNameDivStatusKeyword_5_0_0 = (Keyword)cNameAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAttAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_5_2_0 = (CrossReference)cAttAssignment_5_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_5_2_0_1 = (RuleCall)cAttAttributeCrossReference_5_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cValueAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cValueDoubleLiteralParserRuleCall_5_4_0 = (RuleCall)cValueAssignment_5_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cNameAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cNameMulStatusKeyword_6_0_0 = (Keyword)cNameAssignment_6_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cAttAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_6_2_0 = (CrossReference)cAttAssignment_6_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_6_2_0_1 = (RuleCall)cAttAttributeCrossReference_6_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cValueAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cValueIntLiteralParserRuleCall_6_4_0 = (RuleCall)cValueAssignment_6_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cNameAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cNameMulStatusKeyword_7_0_0 = (Keyword)cNameAssignment_7_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cAttAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_7_2_0 = (CrossReference)cAttAssignment_7_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_7_2_0_1 = (RuleCall)cAttAttributeCrossReference_7_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cValueAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cValueDoubleLiteralParserRuleCall_7_4_0 = (RuleCall)cValueAssignment_7_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cNameAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cNameSumDateKeyword_8_0_0 = (Keyword)cNameAssignment_8_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cAttAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_8_2_0 = (CrossReference)cAttAssignment_8_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_8_2_0_1 = (RuleCall)cAttAttributeCrossReference_8_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cValueAssignment_8_4 = (Assignment)cGroup_8.eContents().get(4);
		private final Alternatives cValueAlternatives_8_4_0 = (Alternatives)cValueAssignment_8_4.eContents().get(0);
		private final RuleCall cValueDateLiteralParserRuleCall_8_4_0_0 = (RuleCall)cValueAlternatives_8_4_0.eContents().get(0);
		private final RuleCall cValueTimeLiteralParserRuleCall_8_4_0_1 = (RuleCall)cValueAlternatives_8_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cNameAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cNameSetDateKeyword_9_0_0 = (Keyword)cNameAssignment_9_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cAttAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_9_2_0 = (CrossReference)cAttAssignment_9_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_9_2_0_1 = (RuleCall)cAttAttributeCrossReference_9_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cValueAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final Alternatives cValueAlternatives_9_4_0 = (Alternatives)cValueAssignment_9_4.eContents().get(0);
		private final RuleCall cValueDateLiteralParserRuleCall_9_4_0_0 = (RuleCall)cValueAlternatives_9_4_0.eContents().get(0);
		private final RuleCall cValueTimeLiteralParserRuleCall_9_4_0_1 = (RuleCall)cValueAlternatives_9_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9_5 = (Keyword)cGroup_9.eContents().get(5);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cNameAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cNameSetStringKeyword_10_0_0 = (Keyword)cNameAssignment_10_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cAttAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_10_2_0 = (CrossReference)cAttAssignment_10_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_10_2_0_1 = (RuleCall)cAttAttributeCrossReference_10_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Assignment cValueAssignment_10_4 = (Assignment)cGroup_10.eContents().get(4);
		private final RuleCall cValueStringLiteralParserRuleCall_10_4_0 = (RuleCall)cValueAssignment_10_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cNameAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cNameSumStringKeyword_11_0_0 = (Keyword)cNameAssignment_11_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cAttAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_11_2_0 = (CrossReference)cAttAssignment_11_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_11_2_0_1 = (RuleCall)cAttAttributeCrossReference_11_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Assignment cValueAssignment_11_4 = (Assignment)cGroup_11.eContents().get(4);
		private final RuleCall cValueStringLiteralParserRuleCall_11_4_0 = (RuleCall)cValueAssignment_11_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_5 = (Keyword)cGroup_11.eContents().get(5);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cNameAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cNameFlagStatusKeyword_12_0_0 = (Keyword)cNameAssignment_12_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cAttAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final CrossReference cAttAttributeCrossReference_12_2_0 = (CrossReference)cAttAssignment_12_2.eContents().get(0);
		private final RuleCall cAttAttributeIDTerminalRuleCall_12_2_0_1 = (RuleCall)cAttAttributeCrossReference_12_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Assignment cValueAssignment_12_4 = (Assignment)cGroup_12.eContents().get(4);
		private final RuleCall cValueBooleanLiteralParserRuleCall_12_4_0 = (RuleCall)cValueAssignment_12_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_5 = (Keyword)cGroup_12.eContents().get(5);
		
		//PepFunction:
		//	name='add-status' '(' att=[Attribute] ',' value=IntLiteral ')' | name='add-status' '(' att=[Attribute] ','
		//	value=DoubleLiteral ')' | name='sub-status' '(' att=[Attribute] ',' value=IntLiteral ')' | name='sub-status' '('
		//	att=[Attribute] ',' value=DoubleLiteral ')' | name='div-status' '(' att=[Attribute] ',' value=IntLiteral ')' |
		//	name='div-status' '(' att=[Attribute] ',' value=DoubleLiteral ')' | name='mul-status' '(' att=[Attribute] ','
		//	value=IntLiteral ')' | name='mul-status' '(' att=[Attribute] ',' value=DoubleLiteral ')' | name='sum-date' '('
		//	att=[Attribute] ',' value=(DateLiteral | TimeLiteral) ')' | name='set-date' '(' att=[Attribute] ',' value=(DateLiteral
		//	| TimeLiteral) ')' | name='set-string' '(' att=[Attribute] ',' value=StringLiteral ')' | name='sum-string' '('
		//	att=[Attribute] ',' value=StringLiteral ')' | name='flag-status' '(' att=[Attribute] ',' value=BooleanLiteral ')';
		@Override public ParserRule getRule() { return rule; }

		//name='add-status' '(' att=[Attribute] ',' value=IntLiteral ')' | name='add-status' '(' att=[Attribute] ','
		//value=DoubleLiteral ')' | name='sub-status' '(' att=[Attribute] ',' value=IntLiteral ')' | name='sub-status' '('
		//att=[Attribute] ',' value=DoubleLiteral ')' | name='div-status' '(' att=[Attribute] ',' value=IntLiteral ')' |
		//name='div-status' '(' att=[Attribute] ',' value=DoubleLiteral ')' | name='mul-status' '(' att=[Attribute] ','
		//value=IntLiteral ')' | name='mul-status' '(' att=[Attribute] ',' value=DoubleLiteral ')' | name='sum-date' '('
		//att=[Attribute] ',' value=(DateLiteral | TimeLiteral) ')' | name='set-date' '(' att=[Attribute] ',' value=(DateLiteral
		//| TimeLiteral) ')' | name='set-string' '(' att=[Attribute] ',' value=StringLiteral ')' | name='sum-string' '('
		//att=[Attribute] ',' value=StringLiteral ')' | name='flag-status' '(' att=[Attribute] ',' value=BooleanLiteral ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//name='add-status' '(' att=[Attribute] ',' value=IntLiteral ')'
		public Group getGroup_0() { return cGroup_0; }

		//name='add-status'
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//'add-status'
		public Keyword getNameAddStatusKeyword_0_0_0() { return cNameAddStatusKeyword_0_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_0_2() { return cAttAssignment_0_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_0_2_0() { return cAttAttributeCrossReference_0_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_0_2_0_1() { return cAttAttributeIDTerminalRuleCall_0_2_0_1; }

		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }

		//value=IntLiteral
		public Assignment getValueAssignment_0_4() { return cValueAssignment_0_4; }

		//IntLiteral
		public RuleCall getValueIntLiteralParserRuleCall_0_4_0() { return cValueIntLiteralParserRuleCall_0_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//name='add-status' '(' att=[Attribute] ',' value=DoubleLiteral ')'
		public Group getGroup_1() { return cGroup_1; }

		//name='add-status'
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//'add-status'
		public Keyword getNameAddStatusKeyword_1_0_0() { return cNameAddStatusKeyword_1_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_1_2() { return cAttAssignment_1_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_1_2_0() { return cAttAttributeCrossReference_1_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_1_2_0_1() { return cAttAttributeIDTerminalRuleCall_1_2_0_1; }

		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//value=DoubleLiteral
		public Assignment getValueAssignment_1_4() { return cValueAssignment_1_4; }

		//DoubleLiteral
		public RuleCall getValueDoubleLiteralParserRuleCall_1_4_0() { return cValueDoubleLiteralParserRuleCall_1_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//name='sub-status' '(' att=[Attribute] ',' value=IntLiteral ')'
		public Group getGroup_2() { return cGroup_2; }

		//name='sub-status'
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//'sub-status'
		public Keyword getNameSubStatusKeyword_2_0_0() { return cNameSubStatusKeyword_2_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_2_2() { return cAttAssignment_2_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_2_2_0() { return cAttAttributeCrossReference_2_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_2_2_0_1() { return cAttAttributeIDTerminalRuleCall_2_2_0_1; }

		//','
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//value=IntLiteral
		public Assignment getValueAssignment_2_4() { return cValueAssignment_2_4; }

		//IntLiteral
		public RuleCall getValueIntLiteralParserRuleCall_2_4_0() { return cValueIntLiteralParserRuleCall_2_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//name='sub-status' '(' att=[Attribute] ',' value=DoubleLiteral ')'
		public Group getGroup_3() { return cGroup_3; }

		//name='sub-status'
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//'sub-status'
		public Keyword getNameSubStatusKeyword_3_0_0() { return cNameSubStatusKeyword_3_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_3_2() { return cAttAssignment_3_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_3_2_0() { return cAttAttributeCrossReference_3_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_3_2_0_1() { return cAttAttributeIDTerminalRuleCall_3_2_0_1; }

		//','
		public Keyword getCommaKeyword_3_3() { return cCommaKeyword_3_3; }

		//value=DoubleLiteral
		public Assignment getValueAssignment_3_4() { return cValueAssignment_3_4; }

		//DoubleLiteral
		public RuleCall getValueDoubleLiteralParserRuleCall_3_4_0() { return cValueDoubleLiteralParserRuleCall_3_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }

		//name='div-status' '(' att=[Attribute] ',' value=IntLiteral ')'
		public Group getGroup_4() { return cGroup_4; }

		//name='div-status'
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }

		//'div-status'
		public Keyword getNameDivStatusKeyword_4_0_0() { return cNameDivStatusKeyword_4_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_4_2() { return cAttAssignment_4_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_4_2_0() { return cAttAttributeCrossReference_4_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_4_2_0_1() { return cAttAttributeIDTerminalRuleCall_4_2_0_1; }

		//','
		public Keyword getCommaKeyword_4_3() { return cCommaKeyword_4_3; }

		//value=IntLiteral
		public Assignment getValueAssignment_4_4() { return cValueAssignment_4_4; }

		//IntLiteral
		public RuleCall getValueIntLiteralParserRuleCall_4_4_0() { return cValueIntLiteralParserRuleCall_4_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }

		//name='div-status' '(' att=[Attribute] ',' value=DoubleLiteral ')'
		public Group getGroup_5() { return cGroup_5; }

		//name='div-status'
		public Assignment getNameAssignment_5_0() { return cNameAssignment_5_0; }

		//'div-status'
		public Keyword getNameDivStatusKeyword_5_0_0() { return cNameDivStatusKeyword_5_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_5_2() { return cAttAssignment_5_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_5_2_0() { return cAttAttributeCrossReference_5_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_5_2_0_1() { return cAttAttributeIDTerminalRuleCall_5_2_0_1; }

		//','
		public Keyword getCommaKeyword_5_3() { return cCommaKeyword_5_3; }

		//value=DoubleLiteral
		public Assignment getValueAssignment_5_4() { return cValueAssignment_5_4; }

		//DoubleLiteral
		public RuleCall getValueDoubleLiteralParserRuleCall_5_4_0() { return cValueDoubleLiteralParserRuleCall_5_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5_5() { return cRightParenthesisKeyword_5_5; }

		//name='mul-status' '(' att=[Attribute] ',' value=IntLiteral ')'
		public Group getGroup_6() { return cGroup_6; }

		//name='mul-status'
		public Assignment getNameAssignment_6_0() { return cNameAssignment_6_0; }

		//'mul-status'
		public Keyword getNameMulStatusKeyword_6_0_0() { return cNameMulStatusKeyword_6_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_6_2() { return cAttAssignment_6_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_6_2_0() { return cAttAttributeCrossReference_6_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_6_2_0_1() { return cAttAttributeIDTerminalRuleCall_6_2_0_1; }

		//','
		public Keyword getCommaKeyword_6_3() { return cCommaKeyword_6_3; }

		//value=IntLiteral
		public Assignment getValueAssignment_6_4() { return cValueAssignment_6_4; }

		//IntLiteral
		public RuleCall getValueIntLiteralParserRuleCall_6_4_0() { return cValueIntLiteralParserRuleCall_6_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6_5() { return cRightParenthesisKeyword_6_5; }

		//name='mul-status' '(' att=[Attribute] ',' value=DoubleLiteral ')'
		public Group getGroup_7() { return cGroup_7; }

		//name='mul-status'
		public Assignment getNameAssignment_7_0() { return cNameAssignment_7_0; }

		//'mul-status'
		public Keyword getNameMulStatusKeyword_7_0_0() { return cNameMulStatusKeyword_7_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_7_2() { return cAttAssignment_7_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_7_2_0() { return cAttAttributeCrossReference_7_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_7_2_0_1() { return cAttAttributeIDTerminalRuleCall_7_2_0_1; }

		//','
		public Keyword getCommaKeyword_7_3() { return cCommaKeyword_7_3; }

		//value=DoubleLiteral
		public Assignment getValueAssignment_7_4() { return cValueAssignment_7_4; }

		//DoubleLiteral
		public RuleCall getValueDoubleLiteralParserRuleCall_7_4_0() { return cValueDoubleLiteralParserRuleCall_7_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_7_5() { return cRightParenthesisKeyword_7_5; }

		//name='sum-date' '(' att=[Attribute] ',' value=(DateLiteral | TimeLiteral) ')'
		public Group getGroup_8() { return cGroup_8; }

		//name='sum-date'
		public Assignment getNameAssignment_8_0() { return cNameAssignment_8_0; }

		//'sum-date'
		public Keyword getNameSumDateKeyword_8_0_0() { return cNameSumDateKeyword_8_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_8_2() { return cAttAssignment_8_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_8_2_0() { return cAttAttributeCrossReference_8_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_8_2_0_1() { return cAttAttributeIDTerminalRuleCall_8_2_0_1; }

		//','
		public Keyword getCommaKeyword_8_3() { return cCommaKeyword_8_3; }

		//value=(DateLiteral | TimeLiteral)
		public Assignment getValueAssignment_8_4() { return cValueAssignment_8_4; }

		//(DateLiteral | TimeLiteral)
		public Alternatives getValueAlternatives_8_4_0() { return cValueAlternatives_8_4_0; }

		//DateLiteral
		public RuleCall getValueDateLiteralParserRuleCall_8_4_0_0() { return cValueDateLiteralParserRuleCall_8_4_0_0; }

		//TimeLiteral
		public RuleCall getValueTimeLiteralParserRuleCall_8_4_0_1() { return cValueTimeLiteralParserRuleCall_8_4_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_8_5() { return cRightParenthesisKeyword_8_5; }

		//name='set-date' '(' att=[Attribute] ',' value=(DateLiteral | TimeLiteral) ')'
		public Group getGroup_9() { return cGroup_9; }

		//name='set-date'
		public Assignment getNameAssignment_9_0() { return cNameAssignment_9_0; }

		//'set-date'
		public Keyword getNameSetDateKeyword_9_0_0() { return cNameSetDateKeyword_9_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_9_2() { return cAttAssignment_9_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_9_2_0() { return cAttAttributeCrossReference_9_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_9_2_0_1() { return cAttAttributeIDTerminalRuleCall_9_2_0_1; }

		//','
		public Keyword getCommaKeyword_9_3() { return cCommaKeyword_9_3; }

		//value=(DateLiteral | TimeLiteral)
		public Assignment getValueAssignment_9_4() { return cValueAssignment_9_4; }

		//(DateLiteral | TimeLiteral)
		public Alternatives getValueAlternatives_9_4_0() { return cValueAlternatives_9_4_0; }

		//DateLiteral
		public RuleCall getValueDateLiteralParserRuleCall_9_4_0_0() { return cValueDateLiteralParserRuleCall_9_4_0_0; }

		//TimeLiteral
		public RuleCall getValueTimeLiteralParserRuleCall_9_4_0_1() { return cValueTimeLiteralParserRuleCall_9_4_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_9_5() { return cRightParenthesisKeyword_9_5; }

		//name='set-string' '(' att=[Attribute] ',' value=StringLiteral ')'
		public Group getGroup_10() { return cGroup_10; }

		//name='set-string'
		public Assignment getNameAssignment_10_0() { return cNameAssignment_10_0; }

		//'set-string'
		public Keyword getNameSetStringKeyword_10_0_0() { return cNameSetStringKeyword_10_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_10_1() { return cLeftParenthesisKeyword_10_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_10_2() { return cAttAssignment_10_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_10_2_0() { return cAttAttributeCrossReference_10_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_10_2_0_1() { return cAttAttributeIDTerminalRuleCall_10_2_0_1; }

		//','
		public Keyword getCommaKeyword_10_3() { return cCommaKeyword_10_3; }

		//value=StringLiteral
		public Assignment getValueAssignment_10_4() { return cValueAssignment_10_4; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_10_4_0() { return cValueStringLiteralParserRuleCall_10_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_10_5() { return cRightParenthesisKeyword_10_5; }

		//name='sum-string' '(' att=[Attribute] ',' value=StringLiteral ')'
		public Group getGroup_11() { return cGroup_11; }

		//name='sum-string'
		public Assignment getNameAssignment_11_0() { return cNameAssignment_11_0; }

		//'sum-string'
		public Keyword getNameSumStringKeyword_11_0_0() { return cNameSumStringKeyword_11_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_11_1() { return cLeftParenthesisKeyword_11_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_11_2() { return cAttAssignment_11_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_11_2_0() { return cAttAttributeCrossReference_11_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_11_2_0_1() { return cAttAttributeIDTerminalRuleCall_11_2_0_1; }

		//','
		public Keyword getCommaKeyword_11_3() { return cCommaKeyword_11_3; }

		//value=StringLiteral
		public Assignment getValueAssignment_11_4() { return cValueAssignment_11_4; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_11_4_0() { return cValueStringLiteralParserRuleCall_11_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_11_5() { return cRightParenthesisKeyword_11_5; }

		//name='flag-status' '(' att=[Attribute] ',' value=BooleanLiteral ')'
		public Group getGroup_12() { return cGroup_12; }

		//name='flag-status'
		public Assignment getNameAssignment_12_0() { return cNameAssignment_12_0; }

		//'flag-status'
		public Keyword getNameFlagStatusKeyword_12_0_0() { return cNameFlagStatusKeyword_12_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_12_1() { return cLeftParenthesisKeyword_12_1; }

		//att=[Attribute]
		public Assignment getAttAssignment_12_2() { return cAttAssignment_12_2; }

		//[Attribute]
		public CrossReference getAttAttributeCrossReference_12_2_0() { return cAttAttributeCrossReference_12_2_0; }

		//ID
		public RuleCall getAttAttributeIDTerminalRuleCall_12_2_0_1() { return cAttAttributeIDTerminalRuleCall_12_2_0_1; }

		//','
		public Keyword getCommaKeyword_12_3() { return cCommaKeyword_12_3; }

		//value=BooleanLiteral
		public Assignment getValueAssignment_12_4() { return cValueAssignment_12_4; }

		//BooleanLiteral
		public RuleCall getValueBooleanLiteralParserRuleCall_12_4_0() { return cValueBooleanLiteralParserRuleCall_12_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_12_5() { return cRightParenthesisKeyword_12_5; }
	}

	public class ObligationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Obligation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEvaluetedOnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEvaluetedOnEffectEnumRuleCall_1_0 = (RuleCall)cEvaluetedOnAssignment_1.eContents().get(0);
		private final Assignment cTypeOblAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeOblAlternatives_2_0 = (Alternatives)cTypeOblAssignment_2.eContents().get(0);
		private final Keyword cTypeOblMKeyword_2_0_0 = (Keyword)cTypeOblAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeOblOKeyword_2_0_1 = (Keyword)cTypeOblAlternatives_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cAlternatives_3_0.eContents().get(0);
		private final Assignment cPepActionAssignment_3_0_0_0 = (Assignment)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cPepActionIDTerminalRuleCall_3_0_0_0_0 = (RuleCall)cPepActionAssignment_3_0_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0_1 = (Keyword)cGroup_3_0_0.eContents().get(1);
		private final Group cGroup_3_0_0_2 = (Group)cGroup_3_0_0.eContents().get(2);
		private final Assignment cExprAssignment_3_0_0_2_0 = (Assignment)cGroup_3_0_0_2.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_3_0_0_2_0_0 = (RuleCall)cExprAssignment_3_0_0_2_0.eContents().get(0);
		private final Group cGroup_3_0_0_2_1 = (Group)cGroup_3_0_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_0_2_1_0 = (Keyword)cGroup_3_0_0_2_1.eContents().get(0);
		private final Assignment cExprAssignment_3_0_0_2_1_1 = (Assignment)cGroup_3_0_0_2_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_3_0_0_2_1_1_0 = (RuleCall)cExprAssignment_3_0_0_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_0_3 = (Keyword)cGroup_3_0_0.eContents().get(3);
		private final Assignment cFunctionAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cFunctionPepFunctionParserRuleCall_3_0_1_0 = (RuleCall)cFunctionAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cE1Assignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cE1FunctionParserRuleCall_3_1_0_0 = (RuleCall)cE1Assignment_3_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cE2Assignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cE2FunctionParserRuleCall_3_1_2_0 = (RuleCall)cE2Assignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cCommaKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cExpirationAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cExpirationLiteralsParserRuleCall_3_1_3_1_0 = (RuleCall)cExpirationAssignment_3_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Obligation:
		//	'[' EvaluetedOn=Effect typeObl=('M' | 'O') ((pepAction=ID '(' (expr+=Expression (',' expr+=Expression)*)* ')' |
		//	function=PepFunction) | e1=Function ',' e2=Function (',' expiration=Literals)?)
		//	']';
		@Override public ParserRule getRule() { return rule; }

		//'[' EvaluetedOn=Effect typeObl=('M' | 'O') ((pepAction=ID '(' (expr+=Expression (',' expr+=Expression)*)* ')' |
		//function=PepFunction) | e1=Function ',' e2=Function (',' expiration=Literals)?) ']'
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//EvaluetedOn=Effect
		public Assignment getEvaluetedOnAssignment_1() { return cEvaluetedOnAssignment_1; }

		//Effect
		public RuleCall getEvaluetedOnEffectEnumRuleCall_1_0() { return cEvaluetedOnEffectEnumRuleCall_1_0; }

		//typeObl=('M' | 'O')
		public Assignment getTypeOblAssignment_2() { return cTypeOblAssignment_2; }

		//('M' | 'O')
		public Alternatives getTypeOblAlternatives_2_0() { return cTypeOblAlternatives_2_0; }

		//'M'
		public Keyword getTypeOblMKeyword_2_0_0() { return cTypeOblMKeyword_2_0_0; }

		//'O'
		public Keyword getTypeOblOKeyword_2_0_1() { return cTypeOblOKeyword_2_0_1; }

		//((pepAction=ID '(' (expr+=Expression (',' expr+=Expression)*)* ')' | function=PepFunction) | e1=Function ',' e2=Function
		//(',' expiration=Literals)?)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//(pepAction=ID '(' (expr+=Expression (',' expr+=Expression)*)* ')' | function=PepFunction)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//pepAction=ID '(' (expr+=Expression (',' expr+=Expression)*)* ')'
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//pepAction=ID
		public Assignment getPepActionAssignment_3_0_0_0() { return cPepActionAssignment_3_0_0_0; }

		//ID
		public RuleCall getPepActionIDTerminalRuleCall_3_0_0_0_0() { return cPepActionIDTerminalRuleCall_3_0_0_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_0_0_1() { return cLeftParenthesisKeyword_3_0_0_1; }

		//(expr+=Expression (',' expr+=Expression)*)*
		public Group getGroup_3_0_0_2() { return cGroup_3_0_0_2; }

		//expr+=Expression
		public Assignment getExprAssignment_3_0_0_2_0() { return cExprAssignment_3_0_0_2_0; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0_0_2_0_0() { return cExprExpressionParserRuleCall_3_0_0_2_0_0; }

		//(',' expr+=Expression)*
		public Group getGroup_3_0_0_2_1() { return cGroup_3_0_0_2_1; }

		//','
		public Keyword getCommaKeyword_3_0_0_2_1_0() { return cCommaKeyword_3_0_0_2_1_0; }

		//expr+=Expression
		public Assignment getExprAssignment_3_0_0_2_1_1() { return cExprAssignment_3_0_0_2_1_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0_0_2_1_1_0() { return cExprExpressionParserRuleCall_3_0_0_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_0_0_3() { return cRightParenthesisKeyword_3_0_0_3; }

		//function=PepFunction
		public Assignment getFunctionAssignment_3_0_1() { return cFunctionAssignment_3_0_1; }

		//PepFunction
		public RuleCall getFunctionPepFunctionParserRuleCall_3_0_1_0() { return cFunctionPepFunctionParserRuleCall_3_0_1_0; }

		//e1=Function ',' e2=Function (',' expiration=Literals)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//e1=Function
		public Assignment getE1Assignment_3_1_0() { return cE1Assignment_3_1_0; }

		//Function
		public RuleCall getE1FunctionParserRuleCall_3_1_0_0() { return cE1FunctionParserRuleCall_3_1_0_0; }

		//','
		public Keyword getCommaKeyword_3_1_1() { return cCommaKeyword_3_1_1; }

		//e2=Function
		public Assignment getE2Assignment_3_1_2() { return cE2Assignment_3_1_2; }

		//Function
		public RuleCall getE2FunctionParserRuleCall_3_1_2_0() { return cE2FunctionParserRuleCall_3_1_2_0; }

		//(',' expiration=Literals)?
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//','
		public Keyword getCommaKeyword_3_1_3_0() { return cCommaKeyword_3_1_3_0; }

		//expiration=Literals
		public Assignment getExpirationAssignment_3_1_3_1() { return cExpirationAssignment_3_1_3_1; }

		//Literals
		public RuleCall getExpirationLiteralsParserRuleCall_3_1_3_1_0() { return cExpirationLiteralsParserRuleCall_3_1_3_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Request");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStubAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStubSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cStubAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeReqParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Request
		//Request:
		//	'Request:' ('[' stub=STRING ']')? '{' name=ID attributes+=AttributeReq+ '}';
		@Override public ParserRule getRule() { return rule; }

		//'Request:' ('[' stub=STRING ']')? '{' name=ID attributes+=AttributeReq+ '}'
		public Group getGroup() { return cGroup; }

		//'Request:'
		public Keyword getRequestKeyword_0() { return cRequestKeyword_0; }

		//('[' stub=STRING ']')?
		public Group getGroup_1() { return cGroup_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//stub=STRING
		public Assignment getStubAssignment_1_1() { return cStubAssignment_1_1; }

		//STRING
		public RuleCall getStubSTRINGTerminalRuleCall_1_1_0() { return cStubSTRINGTerminalRuleCall_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//attributes+=AttributeReq+
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//AttributeReq
		public RuleCall getAttributesAttributeReqParserRuleCall_4_0() { return cAttributesAttributeReqParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AttributeReqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.AttributeReq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAttributeNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLiteralsParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueLiteralsParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttributeReq:
		//	'(' name=AttributeName ',' value+=Literals (',' value+=Literals)* ')';
		@Override public ParserRule getRule() { return rule; }

		//'(' name=AttributeName ',' value+=Literals (',' value+=Literals)* ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//name=AttributeName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AttributeName
		public RuleCall getNameAttributeNameParserRuleCall_1_0() { return cNameAttributeNameParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//value+=Literals
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Literals
		public RuleCall getValueLiteralsParserRuleCall_3_0() { return cValueLiteralsParserRuleCall_3_0; }

		//(',' value+=Literals)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//value+=Literals
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//Literals
		public RuleCall getValueLiteralsParserRuleCall_4_1_0() { return cValueLiteralsParserRuleCall_4_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.AttributeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCategoryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCategorySTRING_OParserRuleCall_0_0 = (RuleCall)cCategoryAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRING_OParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		//AttributeName:
		//	category=STRING_O '/' id=STRING_O;
		@Override public ParserRule getRule() { return rule; }

		//category=STRING_O '/' id=STRING_O
		public Group getGroup() { return cGroup; }

		//category=STRING_O
		public Assignment getCategoryAssignment_0() { return cCategoryAssignment_0; }

		//STRING_O
		public RuleCall getCategorySTRING_OParserRuleCall_0_0() { return cCategorySTRING_OParserRuleCall_0_0; }

		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//id=STRING_O
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING_O
		public RuleCall getIdSTRING_OParserRuleCall_2_0() { return cIdSTRING_OParserRuleCall_2_0; }
	}

	public class STRING_OElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.STRING_O");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword c_Keyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cFullStopKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//STRING_O:
		//	ID ((':' | '_' | '-' | '.') ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ((':' | '_' | '-' | '.') ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//((':' | '_' | '-' | '.') ID)*
		public Group getGroup_1() { return cGroup_1; }

		//(':' | '_' | '-' | '.')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//':'
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }

		//'_'
		public Keyword get_Keyword_1_0_1() { return c_Keyword_1_0_1; }

		//'-'
		public Keyword getHyphenMinusKeyword_1_0_2() { return cHyphenMinusKeyword_1_0_2; }

		//'.'
		public Keyword getFullStopKeyword_1_0_3() { return cFullStopKeyword_1_0_3; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class PDPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.PDP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPdpAlgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPdpAlgAlgParserRuleCall_0_0 = (RuleCall)cPdpAlgAssignment_0.eContents().get(0);
		private final Assignment cPolSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPolSetAbstractPolicyInclParserRuleCall_1_0 = (RuleCall)cPolSetAssignment_1.eContents().get(0);
		
		////PDP - POLICY
		//PDP:
		//	pdpAlg=Alg polSet+=AbstractPolicyIncl+;
		@Override public ParserRule getRule() { return rule; }

		//pdpAlg=Alg polSet+=AbstractPolicyIncl+
		public Group getGroup() { return cGroup; }

		//pdpAlg=Alg
		public Assignment getPdpAlgAssignment_0() { return cPdpAlgAssignment_0; }

		//Alg
		public RuleCall getPdpAlgAlgParserRuleCall_0_0() { return cPdpAlgAlgParserRuleCall_0_0; }

		//polSet+=AbstractPolicyIncl+
		public Assignment getPolSetAssignment_1() { return cPolSetAssignment_1; }

		//AbstractPolicyIncl
		public RuleCall getPolSetAbstractPolicyInclParserRuleCall_1_0() { return cPolSetAbstractPolicyInclParserRuleCall_1_0; }
	}

	public class FacplPolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.FacplPolicy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPolicySetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FacplPolicy:
		//	PolicySet | Rule;
		@Override public ParserRule getRule() { return rule; }

		//PolicySet | Rule
		public Alternatives getAlternatives() { return cAlternatives; }

		//PolicySet
		public RuleCall getPolicySetParserRuleCall_0() { return cPolicySetParserRuleCall_0; }

		//Rule
		public RuleCall getRuleParserRuleCall_1() { return cRuleParserRuleCall_1; }
	}

	public class AbstractPolicyInclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.AbstractPolicyIncl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNewPolicyAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNewPolicyFacplPolicyParserRuleCall_0_0 = (RuleCall)cNewPolicyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIncludeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRefPolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefPolPolicySetCrossReference_1_1_0 = (CrossReference)cRefPolAssignment_1_1.eContents().get(0);
		private final RuleCall cRefPolPolicySetIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefPolPolicySetCrossReference_1_1_0.eContents().get(1);
		
		//AbstractPolicyIncl:
		//	newPolicy=FacplPolicy | 'include' refPol=[PolicySet];
		@Override public ParserRule getRule() { return rule; }

		//newPolicy=FacplPolicy | 'include' refPol=[PolicySet]
		public Alternatives getAlternatives() { return cAlternatives; }

		//newPolicy=FacplPolicy
		public Assignment getNewPolicyAssignment_0() { return cNewPolicyAssignment_0; }

		//FacplPolicy
		public RuleCall getNewPolicyFacplPolicyParserRuleCall_0_0() { return cNewPolicyFacplPolicyParserRuleCall_0_0; }

		//'include' refPol=[PolicySet]
		public Group getGroup_1() { return cGroup_1; }

		//'include'
		public Keyword getIncludeKeyword_1_0() { return cIncludeKeyword_1_0; }

		//refPol=[PolicySet]
		public Assignment getRefPolAssignment_1_1() { return cRefPolAssignment_1_1; }

		//[PolicySet]
		public CrossReference getRefPolPolicySetCrossReference_1_1_0() { return cRefPolPolicySetCrossReference_1_1_0; }

		//ID
		public RuleCall getRefPolPolicySetIDTerminalRuleCall_1_1_0_1() { return cRefPolPolicySetIDTerminalRuleCall_1_1_0_1; }
	}

	public class PolicySetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.PolicySet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolicySetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPolSetAlgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPolSetAlgAlgParserRuleCall_3_0 = (RuleCall)cPolSetAlgAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTargetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTargetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTargetExpressionParserRuleCall_4_1_0 = (RuleCall)cTargetAssignment_4_1.eContents().get(0);
		private final Keyword cPoliciesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPoliciesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPoliciesAbstractPolicyInclParserRuleCall_6_0 = (RuleCall)cPoliciesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOblKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOblAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOblObligationParserRuleCall_7_1_0 = (RuleCall)cOblAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//PolicySet:
		//	'PolicySet' name=ID '{' polSetAlg=Alg ('target:' target=Expression)? 'policies:'
		//	policies+=AbstractPolicyIncl+ ('obl:' obl+=Obligation*)? '}';
		@Override public ParserRule getRule() { return rule; }

		//'PolicySet' name=ID '{' polSetAlg=Alg ('target:' target=Expression)? 'policies:' policies+=AbstractPolicyIncl+ ('obl:'
		//obl+=Obligation*)? '}'
		public Group getGroup() { return cGroup; }

		//'PolicySet'
		public Keyword getPolicySetKeyword_0() { return cPolicySetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//polSetAlg=Alg
		public Assignment getPolSetAlgAssignment_3() { return cPolSetAlgAssignment_3; }

		//Alg
		public RuleCall getPolSetAlgAlgParserRuleCall_3_0() { return cPolSetAlgAlgParserRuleCall_3_0; }

		//('target:' target=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//'target:'
		public Keyword getTargetKeyword_4_0() { return cTargetKeyword_4_0; }

		//target=Expression
		public Assignment getTargetAssignment_4_1() { return cTargetAssignment_4_1; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_4_1_0() { return cTargetExpressionParserRuleCall_4_1_0; }

		//'policies:'
		public Keyword getPoliciesKeyword_5() { return cPoliciesKeyword_5; }

		//policies+=AbstractPolicyIncl+
		public Assignment getPoliciesAssignment_6() { return cPoliciesAssignment_6; }

		//AbstractPolicyIncl
		public RuleCall getPoliciesAbstractPolicyInclParserRuleCall_6_0() { return cPoliciesAbstractPolicyInclParserRuleCall_6_0; }

		//('obl:' obl+=Obligation*)?
		public Group getGroup_7() { return cGroup_7; }

		//'obl:'
		public Keyword getOblKeyword_7_0() { return cOblKeyword_7_0; }

		//obl+=Obligation*
		public Assignment getOblAssignment_7_1() { return cOblAssignment_7_1; }

		//Obligation
		public RuleCall getOblObligationParserRuleCall_7_1_0() { return cOblObligationParserRuleCall_7_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class AlgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Alg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAlgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdAlgAlgLiteralEnumRuleCall_0_0 = (RuleCall)cIdAlgAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFStrategyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFStrategyFulfillmentStrategyEnumRuleCall_1_1_0 = (RuleCall)cFStrategyAssignment_1_1.eContents().get(0);
		
		////Algorithms (with fulfilment strategy)
		//Alg:
		//	idAlg=AlgLiteral ("-" fStrategy=FulfillmentStrategy)?;
		@Override public ParserRule getRule() { return rule; }

		//idAlg=AlgLiteral ("-" fStrategy=FulfillmentStrategy)?
		public Group getGroup() { return cGroup; }

		//idAlg=AlgLiteral
		public Assignment getIdAlgAssignment_0() { return cIdAlgAssignment_0; }

		//AlgLiteral
		public RuleCall getIdAlgAlgLiteralEnumRuleCall_0_0() { return cIdAlgAlgLiteralEnumRuleCall_0_0; }

		//("-" fStrategy=FulfillmentStrategy)?
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//fStrategy=FulfillmentStrategy
		public Assignment getFStrategyAssignment_1_1() { return cFStrategyAssignment_1_1; }

		//FulfillmentStrategy
		public RuleCall getFStrategyFulfillmentStrategyEnumRuleCall_1_1_0() { return cFStrategyFulfillmentStrategyEnumRuleCall_1_1_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEffectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEffectEffectEnumRuleCall_3_0 = (RuleCall)cEffectAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTargetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTargetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTargetExpressionParserRuleCall_4_1_0 = (RuleCall)cTargetAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOblKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOblAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOblObligationParserRuleCall_5_1_0 = (RuleCall)cOblAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Rule:
		//	'Rule' name=ID '(' effect=Effect ('target:' target=Expression)? ('obl:' obl+=Obligation*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//'Rule' name=ID '(' effect=Effect ('target:' target=Expression)? ('obl:' obl+=Obligation*)? ')'
		public Group getGroup() { return cGroup; }

		//'Rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//effect=Effect
		public Assignment getEffectAssignment_3() { return cEffectAssignment_3; }

		//Effect
		public RuleCall getEffectEffectEnumRuleCall_3_0() { return cEffectEffectEnumRuleCall_3_0; }

		//('target:' target=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//'target:'
		public Keyword getTargetKeyword_4_0() { return cTargetKeyword_4_0; }

		//target=Expression
		public Assignment getTargetAssignment_4_1() { return cTargetAssignment_4_1; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_4_1_0() { return cTargetExpressionParserRuleCall_4_1_0; }

		//('obl:' obl+=Obligation*)?
		public Group getGroup_5() { return cGroup_5; }

		//'obl:'
		public Keyword getOblKeyword_5_0() { return cOblKeyword_5_0; }

		//obl+=Obligation*
		public Assignment getOblAssignment_5_1() { return cOblAssignment_5_1; }

		//Obligation
		public RuleCall getOblObligationParserRuleCall_5_1_0() { return cOblObligationParserRuleCall_5_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Expression");
		private final RuleCall cAndExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////EXPRESSION
		//Expression:
		//	AndExpression;
		@Override public ParserRule getRule() { return rule; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall() { return cAndExpressionParserRuleCall; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	OrExpression ({AndExpression.left=current} '&&' right=OrExpression)*
		@Override public ParserRule getRule() { return rule; }

		//OrExpression ({AndExpression.left=current} '&&' right=OrExpression)*
		public Group getGroup() { return cGroup; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }

		//({AndExpression.left=current} '&&' right=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }

		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=OrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//OrExpression
		public RuleCall getRightOrExpressionParserRuleCall_1_2_0() { return cRightOrExpressionParserRuleCall_1_2_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBasicExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBasicExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	BasicExpression ({OrExpression.left=current} '||' right=BasicExpression)*
		@Override public ParserRule getRule() { return rule; }

		//BasicExpression ({OrExpression.left=current} '||' right=BasicExpression)*
		public Group getGroup() { return cGroup; }

		//BasicExpression
		public RuleCall getBasicExpressionParserRuleCall_0() { return cBasicExpressionParserRuleCall_0; }

		//({OrExpression.left=current} '||' right=BasicExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }

		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=BasicExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BasicExpression
		public RuleCall getRightBasicExpressionParserRuleCall_1_2_0() { return cRightBasicExpressionParserRuleCall_1_2_0; }
	}

	public class BasicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.BasicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaredFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cNotExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BasicExpression Expression:
		//	Function | DeclaredFunction | '(' Expression ')' | NotExpression | Literals
		@Override public ParserRule getRule() { return rule; }

		//Function | DeclaredFunction | '(' Expression ')' | NotExpression | Literals
		public Alternatives getAlternatives() { return cAlternatives; }

		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }

		//DeclaredFunction
		public RuleCall getDeclaredFunctionParserRuleCall_1() { return cDeclaredFunctionParserRuleCall_1; }

		//'(' Expression ')'
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_3() { return cNotExpressionParserRuleCall_3; }

		//Literals
		public RuleCall getLiteralsParserRuleCall_4() { return cLiteralsParserRuleCall_4; }
	}

	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.NotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgBasicExpressionParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		
		//NotExpression:
		//	'!' arg=BasicExpression;
		@Override public ParserRule getRule() { return rule; }

		//'!' arg=BasicExpression
		public Group getGroup() { return cGroup; }

		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//arg=BasicExpression
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }

		//BasicExpression
		public RuleCall getArgBasicExpressionParserRuleCall_1_0() { return cArgBasicExpressionParserRuleCall_1_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionIdFunIDEnumRuleCall_0_0 = (RuleCall)cFunctionIdAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cArg1Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cArg1ExpressionParserRuleCall_2_0_0 = (RuleCall)cArg1Assignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cStatusKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cAtt1Assignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final CrossReference cAtt1AttributeCrossReference_2_1_2_0 = (CrossReference)cAtt1Assignment_2_1_2.eContents().get(0);
		private final RuleCall cAtt1AttributeIDTerminalRuleCall_2_1_2_0_1 = (RuleCall)cAtt1AttributeCrossReference_2_1_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cArg2Assignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cArg2ExpressionParserRuleCall_4_0_0 = (RuleCall)cArg2Assignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cStatusKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cSolidusKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cAtt2Assignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final CrossReference cAtt2AttributeCrossReference_4_1_2_0 = (CrossReference)cAtt2Assignment_4_1_2.eContents().get(0);
		private final RuleCall cAtt2AttributeIDTerminalRuleCall_4_1_2_0_1 = (RuleCall)cAtt2AttributeCrossReference_4_1_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Function:
		//	functionId=funID '(' (arg1=Expression | 'status' '/' att1=[Attribute]) ',' (arg2=Expression | 'status' '/'
		//	att2=[Attribute]) ')';
		@Override public ParserRule getRule() { return rule; }

		//functionId=funID '(' (arg1=Expression | 'status' '/' att1=[Attribute]) ',' (arg2=Expression | 'status' '/'
		//att2=[Attribute]) ')'
		public Group getGroup() { return cGroup; }

		//functionId=funID
		public Assignment getFunctionIdAssignment_0() { return cFunctionIdAssignment_0; }

		//funID
		public RuleCall getFunctionIdFunIDEnumRuleCall_0_0() { return cFunctionIdFunIDEnumRuleCall_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arg1=Expression | 'status' '/' att1=[Attribute])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//arg1=Expression
		public Assignment getArg1Assignment_2_0() { return cArg1Assignment_2_0; }

		//Expression
		public RuleCall getArg1ExpressionParserRuleCall_2_0_0() { return cArg1ExpressionParserRuleCall_2_0_0; }

		//'status' '/' att1=[Attribute]
		public Group getGroup_2_1() { return cGroup_2_1; }

		//'status'
		public Keyword getStatusKeyword_2_1_0() { return cStatusKeyword_2_1_0; }

		//'/'
		public Keyword getSolidusKeyword_2_1_1() { return cSolidusKeyword_2_1_1; }

		//att1=[Attribute]
		public Assignment getAtt1Assignment_2_1_2() { return cAtt1Assignment_2_1_2; }

		//[Attribute]
		public CrossReference getAtt1AttributeCrossReference_2_1_2_0() { return cAtt1AttributeCrossReference_2_1_2_0; }

		//ID
		public RuleCall getAtt1AttributeIDTerminalRuleCall_2_1_2_0_1() { return cAtt1AttributeIDTerminalRuleCall_2_1_2_0_1; }

		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//(arg2=Expression | 'status' '/' att2=[Attribute])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//arg2=Expression
		public Assignment getArg2Assignment_4_0() { return cArg2Assignment_4_0; }

		//Expression
		public RuleCall getArg2ExpressionParserRuleCall_4_0_0() { return cArg2ExpressionParserRuleCall_4_0_0; }

		//'status' '/' att2=[Attribute]
		public Group getGroup_4_1() { return cGroup_4_1; }

		//'status'
		public Keyword getStatusKeyword_4_1_0() { return cStatusKeyword_4_1_0; }

		//'/'
		public Keyword getSolidusKeyword_4_1_1() { return cSolidusKeyword_4_1_1; }

		//att2=[Attribute]
		public Assignment getAtt2Assignment_4_1_2() { return cAtt2Assignment_4_1_2; }

		//[Attribute]
		public CrossReference getAtt2AttributeCrossReference_4_1_2_0() { return cAtt2AttributeCrossReference_4_1_2_0; }

		//ID
		public RuleCall getAtt2AttributeIDTerminalRuleCall_4_1_2_0_1() { return cAtt2AttributeIDTerminalRuleCall_4_1_2_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DeclaredFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.DeclaredFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionIdFunctionDeclarationCrossReference_0_0 = (CrossReference)cFunctionIdAssignment_0.eContents().get(0);
		private final RuleCall cFunctionIdFunctionDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionIdFunctionDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Invocation of declared function 
		//DeclaredFunction:
		//	functionId=[FunctionDeclaration] "(" args+=Expression (',' args+=Expression)* ")";
		@Override public ParserRule getRule() { return rule; }

		//functionId=[FunctionDeclaration] "(" args+=Expression (',' args+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//functionId=[FunctionDeclaration]
		public Assignment getFunctionIdAssignment_0() { return cFunctionIdAssignment_0; }

		//[FunctionDeclaration]
		public CrossReference getFunctionIdFunctionDeclarationCrossReference_0_0() { return cFunctionIdFunctionDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getFunctionIdFunctionDeclarationIDTerminalRuleCall_0_0_1() { return cFunctionIdFunctionDeclarationIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args+=Expression
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0() { return cArgsExpressionParserRuleCall_2_0; }

		//(',' args+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//args+=Expression
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_0() { return cArgsExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LiteralsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Literals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimeLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAttributeNameParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSetParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Literals Expression:
		//	IntLiteral
		//	| DoubleLiteral
		//	| BooleanLiteral
		//	| StringLiteral
		//	| DateLiteral
		//	| TimeLiteral
		//	| AttributeName
		//	| Set
		@Override public ParserRule getRule() { return rule; }

		//IntLiteral | DoubleLiteral | BooleanLiteral | StringLiteral | DateLiteral | TimeLiteral | AttributeName | Set
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }

		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_1() { return cDoubleLiteralParserRuleCall_1; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_2() { return cBooleanLiteralParserRuleCall_2; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }

		//DateLiteral
		public RuleCall getDateLiteralParserRuleCall_4() { return cDateLiteralParserRuleCall_4; }

		//TimeLiteral
		public RuleCall getTimeLiteralParserRuleCall_5() { return cTimeLiteralParserRuleCall_5; }

		//AttributeName
		public RuleCall getAttributeNameParserRuleCall_6() { return cAttributeNameParserRuleCall_6; }

		//Set
		public RuleCall getSetParserRuleCall_7() { return cSetParserRuleCall_7; }
	}

	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgsLiteralsParserRuleCall_1_0_0 = (RuleCall)cArgsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgsLiteralsParserRuleCall_1_1_1_0 = (RuleCall)cArgsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Set:
		//	'set(' (args+=Literals (',' args+=Literals)*) ')';
		@Override public ParserRule getRule() { return rule; }

		//'set(' (args+=Literals (',' args+=Literals)*) ')'
		public Group getGroup() { return cGroup; }

		//'set('
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//(args+=Literals (',' args+=Literals)*)
		public Group getGroup_1() { return cGroup_1; }

		//args+=Literals
		public Assignment getArgsAssignment_1_0() { return cArgsAssignment_1_0; }

		//Literals
		public RuleCall getArgsLiteralsParserRuleCall_1_0_0() { return cArgsLiteralsParserRuleCall_1_0_0; }

		//(',' args+=Literals)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//args+=Literals
		public Assignment getArgsAssignment_1_1_1() { return cArgsAssignment_1_1_1; }

		//Literals
		public RuleCall getArgsLiteralsParserRuleCall_1_1_1_0() { return cArgsLiteralsParserRuleCall_1_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }

		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.DoubleLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleLiteral:
		//	value=REAL;
		@Override public ParserRule getRule() { return rule; }

		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_0() { return cValueREALTerminalRuleCall_0; }
	}

	public class DateLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.DateLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDATETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DateLiteral:
		//	value=DATE;
		@Override public ParserRule getRule() { return rule; }

		//value=DATE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DATE
		public RuleCall getValueDATETerminalRuleCall_0() { return cValueDATETerminalRuleCall_0; }
	}

	public class TimeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.TimeLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueTIMETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//TimeLiteral:
		//	value=TIME;
		@Override public ParserRule getRule() { return rule; }

		//value=TIME
		public Assignment getValueAssignment() { return cValueAssignment; }

		//TIME
		public RuleCall getValueTIMETerminalRuleCall_0() { return cValueTIMETerminalRuleCall_0; }
	}
	
	
	public class TypeLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.TypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDoubleDoubleKeyword_1_0 = (Keyword)cDoubleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBoolBoolKeyword_2_0 = (Keyword)cBoolEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStringStringKeyword_3_0 = (Keyword)cStringEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateTimeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateTimeDateTimeKeyword_4_0 = (Keyword)cDateTimeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSetIntEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSetIntSetIntKeyword_5_0 = (Keyword)cSetIntEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSetDoubleEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSetDoubleSetDoubleKeyword_6_0 = (Keyword)cSetDoubleEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSetBoolEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSetBoolSetBoolKeyword_7_0 = (Keyword)cSetBoolEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSetStringEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSetStringSetStringKeyword_8_0 = (Keyword)cSetStringEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSetDateTimeEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSetDateTimeSetDateTimeKeyword_9_0 = (Keyword)cSetDateTimeEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum TypeLiteral:
		//	Int | Double | Bool | String | DateTime |
		//	SetInt='Set<Int>' | SetDouble='Set<Double>' | SetBool='Set<Bool>' | SetString='Set<String>' |
		//	SetDateTime='Set<DateTime>';
		public EnumRule getRule() { return rule; }

		//Int | Double | Bool | String | DateTime | SetInt='Set<Int>' | SetDouble='Set<Double>' | SetBool='Set<Bool>' |
		//SetString='Set<String>' | SetDateTime='Set<DateTime>'
		public Alternatives getAlternatives() { return cAlternatives; }

		//Int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }

		//'Int'
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }

		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_1() { return cDoubleEnumLiteralDeclaration_1; }

		//'Double'
		public Keyword getDoubleDoubleKeyword_1_0() { return cDoubleDoubleKeyword_1_0; }

		//Bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_2() { return cBoolEnumLiteralDeclaration_2; }

		//'Bool'
		public Keyword getBoolBoolKeyword_2_0() { return cBoolBoolKeyword_2_0; }

		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_3() { return cStringEnumLiteralDeclaration_3; }

		//'String'
		public Keyword getStringStringKeyword_3_0() { return cStringStringKeyword_3_0; }

		//DateTime
		public EnumLiteralDeclaration getDateTimeEnumLiteralDeclaration_4() { return cDateTimeEnumLiteralDeclaration_4; }

		//'DateTime'
		public Keyword getDateTimeDateTimeKeyword_4_0() { return cDateTimeDateTimeKeyword_4_0; }

		//SetInt='Set<Int>'
		public EnumLiteralDeclaration getSetIntEnumLiteralDeclaration_5() { return cSetIntEnumLiteralDeclaration_5; }

		//'Set<Int>'
		public Keyword getSetIntSetIntKeyword_5_0() { return cSetIntSetIntKeyword_5_0; }

		//SetDouble='Set<Double>'
		public EnumLiteralDeclaration getSetDoubleEnumLiteralDeclaration_6() { return cSetDoubleEnumLiteralDeclaration_6; }

		//'Set<Double>'
		public Keyword getSetDoubleSetDoubleKeyword_6_0() { return cSetDoubleSetDoubleKeyword_6_0; }

		//SetBool='Set<Bool>'
		public EnumLiteralDeclaration getSetBoolEnumLiteralDeclaration_7() { return cSetBoolEnumLiteralDeclaration_7; }

		//'Set<Bool>'
		public Keyword getSetBoolSetBoolKeyword_7_0() { return cSetBoolSetBoolKeyword_7_0; }

		//SetString='Set<String>'
		public EnumLiteralDeclaration getSetStringEnumLiteralDeclaration_8() { return cSetStringEnumLiteralDeclaration_8; }

		//'Set<String>'
		public Keyword getSetStringSetStringKeyword_8_0() { return cSetStringSetStringKeyword_8_0; }

		//SetDateTime='Set<DateTime>'
		public EnumLiteralDeclaration getSetDateTimeEnumLiteralDeclaration_9() { return cSetDateTimeEnumLiteralDeclaration_9; }

		//'Set<DateTime>'
		public Keyword getSetDateTimeSetDateTimeKeyword_9_0() { return cSetDateTimeSetDateTimeKeyword_9_0; }
	}

	public class PEPAlgElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.PEPAlg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBASEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBASEBaseKeyword_0_0 = (Keyword)cBASEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDENYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDENYDenyBiasedKeyword_1_0 = (Keyword)cDENYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPERMITEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPERMITPermitBiasedKeyword_2_0 = (Keyword)cPERMITEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PEPAlg:
		//	BASE='base' | DENY='deny-biased' | PERMIT='permit-biased';
		public EnumRule getRule() { return rule; }

		//BASE='base' | DENY='deny-biased' | PERMIT='permit-biased'
		public Alternatives getAlternatives() { return cAlternatives; }

		//BASE='base'
		public EnumLiteralDeclaration getBASEEnumLiteralDeclaration_0() { return cBASEEnumLiteralDeclaration_0; }

		//'base'
		public Keyword getBASEBaseKeyword_0_0() { return cBASEBaseKeyword_0_0; }

		//DENY='deny-biased'
		public EnumLiteralDeclaration getDENYEnumLiteralDeclaration_1() { return cDENYEnumLiteralDeclaration_1; }

		//'deny-biased'
		public Keyword getDENYDenyBiasedKeyword_1_0() { return cDENYDenyBiasedKeyword_1_0; }

		//PERMIT='permit-biased'
		public EnumLiteralDeclaration getPERMITEnumLiteralDeclaration_2() { return cPERMITEnumLiteralDeclaration_2; }

		//'permit-biased'
		public Keyword getPERMITPermitBiasedKeyword_2_0() { return cPERMITPermitBiasedKeyword_2_0; }
	}

	public class AlgLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.AlgLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONLY_ONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONLY_ONEOnlyOneApplicableKeyword_0_0 = (Keyword)cONLY_ONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDENY_OVEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDENY_OVERDenyOverridesKeyword_1_0 = (Keyword)cDENY_OVEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPERMIT_OVEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPERMIT_OVERPermitOverridesKeyword_2_0 = (Keyword)cPERMIT_OVEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFIRSTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFIRSTFirstApplicableKeyword_3_0 = (Keyword)cFIRSTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDENY_UNLESSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDENY_UNLESSDenyUnlessPermitKeyword_4_0 = (Keyword)cDENY_UNLESSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPERMIT_UNLESSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPERMIT_UNLESSPermitUnlessDenyKeyword_5_0 = (Keyword)cPERMIT_UNLESSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWEAK_CONSEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWEAK_CONSWeakConsensusKeyword_6_0 = (Keyword)cWEAK_CONSEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONG_CONSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSTRONG_CONSStrongConsensusKeyword_7_0 = (Keyword)cSTRONG_CONSEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cCUSTOM_ALGEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cCUSTOM_ALGCustomAlgorithmKeyword_8_0 = (Keyword)cCUSTOM_ALGEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum AlgLiteral:
		//	ONLY_ONE='only-one-applicable' |
		//	DENY_OVER='deny-overrides' | PERMIT_OVER='permit-overrides' | FIRST='first-applicable' |
		//	DENY_UNLESS='deny-unless-permit' | PERMIT_UNLESS='permit-unless-deny' |
		//	WEAK_CONS='weak-consensus' | STRONG_CONS='strong-consensus' |
		//	CUSTOM_ALG='custom-algorithm';
		public EnumRule getRule() { return rule; }

		//ONLY_ONE='only-one-applicable' | DENY_OVER='deny-overrides' | PERMIT_OVER='permit-overrides' | FIRST='first-applicable'
		//| DENY_UNLESS='deny-unless-permit' | PERMIT_UNLESS='permit-unless-deny' | WEAK_CONS='weak-consensus' |
		//STRONG_CONS='strong-consensus' | CUSTOM_ALG='custom-algorithm'
		public Alternatives getAlternatives() { return cAlternatives; }

		//ONLY_ONE='only-one-applicable'
		public EnumLiteralDeclaration getONLY_ONEEnumLiteralDeclaration_0() { return cONLY_ONEEnumLiteralDeclaration_0; }

		//'only-one-applicable'
		public Keyword getONLY_ONEOnlyOneApplicableKeyword_0_0() { return cONLY_ONEOnlyOneApplicableKeyword_0_0; }

		//DENY_OVER='deny-overrides'
		public EnumLiteralDeclaration getDENY_OVEREnumLiteralDeclaration_1() { return cDENY_OVEREnumLiteralDeclaration_1; }

		//'deny-overrides'
		public Keyword getDENY_OVERDenyOverridesKeyword_1_0() { return cDENY_OVERDenyOverridesKeyword_1_0; }

		//PERMIT_OVER='permit-overrides'
		public EnumLiteralDeclaration getPERMIT_OVEREnumLiteralDeclaration_2() { return cPERMIT_OVEREnumLiteralDeclaration_2; }

		//'permit-overrides'
		public Keyword getPERMIT_OVERPermitOverridesKeyword_2_0() { return cPERMIT_OVERPermitOverridesKeyword_2_0; }

		//FIRST='first-applicable'
		public EnumLiteralDeclaration getFIRSTEnumLiteralDeclaration_3() { return cFIRSTEnumLiteralDeclaration_3; }

		//'first-applicable'
		public Keyword getFIRSTFirstApplicableKeyword_3_0() { return cFIRSTFirstApplicableKeyword_3_0; }

		//DENY_UNLESS='deny-unless-permit'
		public EnumLiteralDeclaration getDENY_UNLESSEnumLiteralDeclaration_4() { return cDENY_UNLESSEnumLiteralDeclaration_4; }

		//'deny-unless-permit'
		public Keyword getDENY_UNLESSDenyUnlessPermitKeyword_4_0() { return cDENY_UNLESSDenyUnlessPermitKeyword_4_0; }

		//PERMIT_UNLESS='permit-unless-deny'
		public EnumLiteralDeclaration getPERMIT_UNLESSEnumLiteralDeclaration_5() { return cPERMIT_UNLESSEnumLiteralDeclaration_5; }

		//'permit-unless-deny'
		public Keyword getPERMIT_UNLESSPermitUnlessDenyKeyword_5_0() { return cPERMIT_UNLESSPermitUnlessDenyKeyword_5_0; }

		//WEAK_CONS='weak-consensus'
		public EnumLiteralDeclaration getWEAK_CONSEnumLiteralDeclaration_6() { return cWEAK_CONSEnumLiteralDeclaration_6; }

		//'weak-consensus'
		public Keyword getWEAK_CONSWeakConsensusKeyword_6_0() { return cWEAK_CONSWeakConsensusKeyword_6_0; }

		//STRONG_CONS='strong-consensus'
		public EnumLiteralDeclaration getSTRONG_CONSEnumLiteralDeclaration_7() { return cSTRONG_CONSEnumLiteralDeclaration_7; }

		//'strong-consensus'
		public Keyword getSTRONG_CONSStrongConsensusKeyword_7_0() { return cSTRONG_CONSStrongConsensusKeyword_7_0; }

		//CUSTOM_ALG='custom-algorithm'
		public EnumLiteralDeclaration getCUSTOM_ALGEnumLiteralDeclaration_8() { return cCUSTOM_ALGEnumLiteralDeclaration_8; }

		//'custom-algorithm'
		public Keyword getCUSTOM_ALGCustomAlgorithmKeyword_8_0() { return cCUSTOM_ALGCustomAlgorithmKeyword_8_0; }
	}

	public class FulfillmentStrategyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.FulfillmentStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGREEDYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGREEDYGreedyKeyword_0_0 = (Keyword)cGREEDYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cALLAllKeyword_1_0 = (Keyword)cALLEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FulfillmentStrategy:
		//	GREEDY='greedy' | ALL='all';
		public EnumRule getRule() { return rule; }

		//GREEDY='greedy' | ALL='all'
		public Alternatives getAlternatives() { return cAlternatives; }

		//GREEDY='greedy'
		public EnumLiteralDeclaration getGREEDYEnumLiteralDeclaration_0() { return cGREEDYEnumLiteralDeclaration_0; }

		//'greedy'
		public Keyword getGREEDYGreedyKeyword_0_0() { return cGREEDYGreedyKeyword_0_0; }

		//ALL='all'
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_1() { return cALLEnumLiteralDeclaration_1; }

		//'all'
		public Keyword getALLAllKeyword_1_0() { return cALLAllKeyword_1_0; }
	}

	public class EffectElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPERMITEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPERMITPermitKeyword_0_0 = (Keyword)cPERMITEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDENYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDENYDenyKeyword_1_0 = (Keyword)cDENYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Effect:
		//	PERMIT='permit' | DENY='deny';
		public EnumRule getRule() { return rule; }

		//PERMIT='permit' | DENY='deny'
		public Alternatives getAlternatives() { return cAlternatives; }

		//PERMIT='permit'
		public EnumLiteralDeclaration getPERMITEnumLiteralDeclaration_0() { return cPERMITEnumLiteralDeclaration_0; }

		//'permit'
		public Keyword getPERMITPermitKeyword_0_0() { return cPERMITPermitKeyword_0_0; }

		//DENY='deny'
		public EnumLiteralDeclaration getDENYEnumLiteralDeclaration_1() { return cDENYEnumLiteralDeclaration_1; }

		//'deny'
		public Keyword getDENYDenyKeyword_1_0() { return cDENYDenyKeyword_1_0; }
	}

	public class FunIDElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.funID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cN_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cN_EQUALNotEqualKeyword_1_0 = (Keyword)cN_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESSLessThanKeyword_2_0 = (Keyword)cLESSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESS_EQLessThanOrEqualKeyword_3_0 = (Keyword)cLESS_EQEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATERGreaterThanKeyword_4_0 = (Keyword)cGREATEREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATER_EQGreaterThanOrEqualKeyword_5_0 = (Keyword)cGREATER_EQEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cINInKeyword_6_0 = (Keyword)cINEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cADDAdditionKeyword_7_0 = (Keyword)cADDEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSUBTRACTSubtractKeyword_8_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDIVIDEDivideKeyword_9_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cMULTIPLYMultiplyKeyword_10_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum funID:
		//	EQUAL='equal' | N_EQUAL='not-equal' |
		//	LESS='less-than' | LESS_EQ='less-than-or-equal' |
		//	GREATER='greater-than' | GREATER_EQ='greater-than-or-equal' |
		//	IN='in' | ADD='addition' | SUBTRACT='subtract' | DIVIDE='divide' |
		//	MULTIPLY='multiply';
		public EnumRule getRule() { return rule; }

		//EQUAL='equal' | N_EQUAL='not-equal' | LESS='less-than' | LESS_EQ='less-than-or-equal' | GREATER='greater-than' |
		//GREATER_EQ='greater-than-or-equal' | IN='in' | ADD='addition' | SUBTRACT='subtract' | DIVIDE='divide' |
		//MULTIPLY='multiply'
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL='equal'
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//'equal'
		public Keyword getEQUALEqualKeyword_0_0() { return cEQUALEqualKeyword_0_0; }

		//N_EQUAL='not-equal'
		public EnumLiteralDeclaration getN_EQUALEnumLiteralDeclaration_1() { return cN_EQUALEnumLiteralDeclaration_1; }

		//'not-equal'
		public Keyword getN_EQUALNotEqualKeyword_1_0() { return cN_EQUALNotEqualKeyword_1_0; }

		//LESS='less-than'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_2() { return cLESSEnumLiteralDeclaration_2; }

		//'less-than'
		public Keyword getLESSLessThanKeyword_2_0() { return cLESSLessThanKeyword_2_0; }

		//LESS_EQ='less-than-or-equal'
		public EnumLiteralDeclaration getLESS_EQEnumLiteralDeclaration_3() { return cLESS_EQEnumLiteralDeclaration_3; }

		//'less-than-or-equal'
		public Keyword getLESS_EQLessThanOrEqualKeyword_3_0() { return cLESS_EQLessThanOrEqualKeyword_3_0; }

		//GREATER='greater-than'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_4() { return cGREATEREnumLiteralDeclaration_4; }

		//'greater-than'
		public Keyword getGREATERGreaterThanKeyword_4_0() { return cGREATERGreaterThanKeyword_4_0; }

		//GREATER_EQ='greater-than-or-equal'
		public EnumLiteralDeclaration getGREATER_EQEnumLiteralDeclaration_5() { return cGREATER_EQEnumLiteralDeclaration_5; }

		//'greater-than-or-equal'
		public Keyword getGREATER_EQGreaterThanOrEqualKeyword_5_0() { return cGREATER_EQGreaterThanOrEqualKeyword_5_0; }

		//IN='in'
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_6() { return cINEnumLiteralDeclaration_6; }

		//'in'
		public Keyword getINInKeyword_6_0() { return cINInKeyword_6_0; }

		//ADD='addition'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_7() { return cADDEnumLiteralDeclaration_7; }

		//'addition'
		public Keyword getADDAdditionKeyword_7_0() { return cADDAdditionKeyword_7_0; }

		//SUBTRACT='subtract'
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_8() { return cSUBTRACTEnumLiteralDeclaration_8; }

		//'subtract'
		public Keyword getSUBTRACTSubtractKeyword_8_0() { return cSUBTRACTSubtractKeyword_8_0; }

		//DIVIDE='divide'
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_9() { return cDIVIDEEnumLiteralDeclaration_9; }

		//'divide'
		public Keyword getDIVIDEDivideKeyword_9_0() { return cDIVIDEDivideKeyword_9_0; }

		//MULTIPLY='multiply'
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_10() { return cMULTIPLYEnumLiteralDeclaration_10; }

		//'multiply'
		public Keyword getMULTIPLYMultiplyKeyword_10_0() { return cMULTIPLYMultiplyKeyword_10_0; }
	}
	
	private final FacplElements pFacpl;
	private final ImportElements pImport;
	private final MainFacplElements pMainFacpl;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final TypeLiteralElements eTypeLiteral;
	private final PAFElements pPAF;
	private final STATUSElements pSTATUS;
	private final AttributeElements pAttribute;
	private final AttributeDeclarationElements pAttributeDeclaration;
	private final PepFunctionElements pPepFunction;
	private final ObligationElements pObligation;
	private final PEPAlgElements ePEPAlg;
	private final RequestElements pRequest;
	private final AttributeReqElements pAttributeReq;
	private final AttributeNameElements pAttributeName;
	private final STRING_OElements pSTRING_O;
	private final PDPElements pPDP;
	private final FacplPolicyElements pFacplPolicy;
	private final AbstractPolicyInclElements pAbstractPolicyIncl;
	private final PolicySetElements pPolicySet;
	private final AlgElements pAlg;
	private final AlgLiteralElements eAlgLiteral;
	private final FulfillmentStrategyElements eFulfillmentStrategy;
	private final RuleElements pRule;
	private final EffectElements eEffect;
	private final ExpressionElements pExpression;
	private final AndExpressionElements pAndExpression;
	private final OrExpressionElements pOrExpression;
	private final BasicExpressionElements pBasicExpression;
	private final NotExpressionElements pNotExpression;
	private final FunctionElements pFunction;
	private final DeclaredFunctionElements pDeclaredFunction;
	private final FunIDElements eFunID;
	private final LiteralsElements pLiterals;
	private final SetElements pSet;
	private final StringLiteralElements pStringLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final IntLiteralElements pIntLiteral;
	private final DoubleLiteralElements pDoubleLiteral;
	private final DateLiteralElements pDateLiteral;
	private final TimeLiteralElements pTimeLiteral;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tINT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tDATE;
	private final TerminalRule tTIME;
	private final TerminalRule tREAL;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Facpl2GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFacpl = new FacplElements();
		this.pImport = new ImportElements();
		this.pMainFacpl = new MainFacplElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.eTypeLiteral = new TypeLiteralElements();
		this.pPAF = new PAFElements();
		this.pSTATUS = new STATUSElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeDeclaration = new AttributeDeclarationElements();
		this.pPepFunction = new PepFunctionElements();
		this.pObligation = new ObligationElements();
		this.ePEPAlg = new PEPAlgElements();
		this.pRequest = new RequestElements();
		this.pAttributeReq = new AttributeReqElements();
		this.pAttributeName = new AttributeNameElements();
		this.pSTRING_O = new STRING_OElements();
		this.pPDP = new PDPElements();
		this.pFacplPolicy = new FacplPolicyElements();
		this.pAbstractPolicyIncl = new AbstractPolicyInclElements();
		this.pPolicySet = new PolicySetElements();
		this.pAlg = new AlgElements();
		this.eAlgLiteral = new AlgLiteralElements();
		this.eFulfillmentStrategy = new FulfillmentStrategyElements();
		this.pRule = new RuleElements();
		this.eEffect = new EffectElements();
		this.pExpression = new ExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pBasicExpression = new BasicExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pFunction = new FunctionElements();
		this.pDeclaredFunction = new DeclaredFunctionElements();
		this.eFunID = new FunIDElements();
		this.pLiterals = new LiteralsElements();
		this.pSet = new SetElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pDoubleLiteral = new DoubleLiteralElements();
		this.pDateLiteral = new DateLiteralElements();
		this.pTimeLiteral = new TimeLiteralElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.BOOLEAN");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.INT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.SL_COMMENT");
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.DATE");
		this.tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.TIME");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.REAL");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unifi.xtext.facpl.Facpl2.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unifi.xtext.facpl.Facpl2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Facpl:
	//	importEl+=Import* & declarations+=FunctionDeclaration* & policies+=PolicySet* & requests+=Request* & main=MainFacpl?;
	public FacplElements getFacplAccess() {
		return pFacpl;
	}
	
	public ParserRule getFacplRule() {
		return getFacplAccess().getRule();
	}

	////Import
	//Import:
	//	'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	////Main
	//MainFacpl:
	//	'PAS' '{' 'Extended Indeterminate' ':' extIndet=BooleanLiteral ';' ('Java Package' ':' genPackage=STRING ';')?
	//	('Requests To Evaluate' ':' (refRequest+=[Request] (',' refRequest+=[Request])*) ';') paf=PAF '}';
	public MainFacplElements getMainFacplAccess() {
		return pMainFacpl;
	}
	
	public ParserRule getMainFacplRule() {
		return getMainFacplAccess().getRule();
	}

	////Function Declaration
	//FunctionDeclaration:
	//	'dec-fun' type=TypeLiteral name=ID "(" args+=TypeLiteral (',' args+=TypeLiteral)* ")";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//enum TypeLiteral:
	//	Int | Double | Bool | String | DateTime |
	//	SetInt='Set<Int>' | SetDouble='Set<Double>' | SetBool='Set<Bool>' | SetString='Set<String>' |
	//	SetDateTime='Set<DateTime>';
	public TypeLiteralElements getTypeLiteralAccess() {
		return eTypeLiteral;
	}
	
	public EnumRule getTypeLiteralRule() {
		return getTypeLiteralAccess().getRule();
	}

	////PAF - Policy Authorisation Framework
	/// *
	// * 
	// * ROBA NUOVA
	// * 
	// * 
	// * / PAF:
	//	status=STATUS? 'pep:' pep=PEPAlg 'pdp:' pdp=PDP;
	public PAFElements getPAFAccess() {
		return pPAF;
	}
	
	public ParserRule getPAFRule() {
		return getPAFAccess().getRule();
	}

	//STATUS:
	//	'status:' '[' elements+=AttributeDeclaration+ ']';
	public STATUSElements getSTATUSAccess() {
		return pSTATUS;
	}
	
	public ParserRule getSTATUSRule() {
		return getSTATUSAccess().getRule();
	}

	//Attribute:
	//	type='boolean' name=ID '=' x=BooleanLiteral | type='int' name=ID '=' x=IntLiteral | type='date' name=ID '='
	//	x=(DateLiteral | TimeLiteral) | type='float' name=ID '=' x=(IntLiteral | DoubleLiteral) | type='string' name=ID '='
	//	x=StringLiteral;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AttributeDeclaration:
	//	'(' att=Attribute ')';
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return pAttributeDeclaration;
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}

	//PepFunction:
	//	name='add-status' '(' att=[Attribute] ',' value=IntLiteral ')' | name='add-status' '(' att=[Attribute] ','
	//	value=DoubleLiteral ')' | name='sub-status' '(' att=[Attribute] ',' value=IntLiteral ')' | name='sub-status' '('
	//	att=[Attribute] ',' value=DoubleLiteral ')' | name='div-status' '(' att=[Attribute] ',' value=IntLiteral ')' |
	//	name='div-status' '(' att=[Attribute] ',' value=DoubleLiteral ')' | name='mul-status' '(' att=[Attribute] ','
	//	value=IntLiteral ')' | name='mul-status' '(' att=[Attribute] ',' value=DoubleLiteral ')' | name='sum-date' '('
	//	att=[Attribute] ',' value=(DateLiteral | TimeLiteral) ')' | name='set-date' '(' att=[Attribute] ',' value=(DateLiteral
	//	| TimeLiteral) ')' | name='set-string' '(' att=[Attribute] ',' value=StringLiteral ')' | name='sum-string' '('
	//	att=[Attribute] ',' value=StringLiteral ')' | name='flag-status' '(' att=[Attribute] ',' value=BooleanLiteral ')';
	public PepFunctionElements getPepFunctionAccess() {
		return pPepFunction;
	}
	
	public ParserRule getPepFunctionRule() {
		return getPepFunctionAccess().getRule();
	}

	//Obligation:
	//	'[' EvaluetedOn=Effect typeObl=('M' | 'O') ((pepAction=ID '(' (expr+=Expression (',' expr+=Expression)*)* ')' |
	//	function=PepFunction) | e1=Function ',' e2=Function (',' expiration=Literals)?)
	//	']';
	public ObligationElements getObligationAccess() {
		return pObligation;
	}
	
	public ParserRule getObligationRule() {
		return getObligationAccess().getRule();
	}

	//enum PEPAlg:
	//	BASE='base' | DENY='deny-biased' | PERMIT='permit-biased';
	public PEPAlgElements getPEPAlgAccess() {
		return ePEPAlg;
	}
	
	public EnumRule getPEPAlgRule() {
		return getPEPAlgAccess().getRule();
	}

	////Request
	//Request:
	//	'Request:' ('[' stub=STRING ']')? '{' name=ID attributes+=AttributeReq+ '}';
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}

	//AttributeReq:
	//	'(' name=AttributeName ',' value+=Literals (',' value+=Literals)* ')';
	public AttributeReqElements getAttributeReqAccess() {
		return pAttributeReq;
	}
	
	public ParserRule getAttributeReqRule() {
		return getAttributeReqAccess().getRule();
	}

	//AttributeName:
	//	category=STRING_O '/' id=STRING_O;
	public AttributeNameElements getAttributeNameAccess() {
		return pAttributeName;
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//STRING_O:
	//	ID ((':' | '_' | '-' | '.') ID)*;
	public STRING_OElements getSTRING_OAccess() {
		return pSTRING_O;
	}
	
	public ParserRule getSTRING_ORule() {
		return getSTRING_OAccess().getRule();
	}

	////PDP - POLICY
	//PDP:
	//	pdpAlg=Alg polSet+=AbstractPolicyIncl+;
	public PDPElements getPDPAccess() {
		return pPDP;
	}
	
	public ParserRule getPDPRule() {
		return getPDPAccess().getRule();
	}

	//FacplPolicy:
	//	PolicySet | Rule;
	public FacplPolicyElements getFacplPolicyAccess() {
		return pFacplPolicy;
	}
	
	public ParserRule getFacplPolicyRule() {
		return getFacplPolicyAccess().getRule();
	}

	//AbstractPolicyIncl:
	//	newPolicy=FacplPolicy | 'include' refPol=[PolicySet];
	public AbstractPolicyInclElements getAbstractPolicyInclAccess() {
		return pAbstractPolicyIncl;
	}
	
	public ParserRule getAbstractPolicyInclRule() {
		return getAbstractPolicyInclAccess().getRule();
	}

	//PolicySet:
	//	'PolicySet' name=ID '{' polSetAlg=Alg ('target:' target=Expression)? 'policies:'
	//	policies+=AbstractPolicyIncl+ ('obl:' obl+=Obligation*)? '}';
	public PolicySetElements getPolicySetAccess() {
		return pPolicySet;
	}
	
	public ParserRule getPolicySetRule() {
		return getPolicySetAccess().getRule();
	}

	////Algorithms (with fulfilment strategy)
	//Alg:
	//	idAlg=AlgLiteral ("-" fStrategy=FulfillmentStrategy)?;
	public AlgElements getAlgAccess() {
		return pAlg;
	}
	
	public ParserRule getAlgRule() {
		return getAlgAccess().getRule();
	}

	//enum AlgLiteral:
	//	ONLY_ONE='only-one-applicable' |
	//	DENY_OVER='deny-overrides' | PERMIT_OVER='permit-overrides' | FIRST='first-applicable' |
	//	DENY_UNLESS='deny-unless-permit' | PERMIT_UNLESS='permit-unless-deny' |
	//	WEAK_CONS='weak-consensus' | STRONG_CONS='strong-consensus' |
	//	CUSTOM_ALG='custom-algorithm';
	public AlgLiteralElements getAlgLiteralAccess() {
		return eAlgLiteral;
	}
	
	public EnumRule getAlgLiteralRule() {
		return getAlgLiteralAccess().getRule();
	}

	//enum FulfillmentStrategy:
	//	GREEDY='greedy' | ALL='all';
	public FulfillmentStrategyElements getFulfillmentStrategyAccess() {
		return eFulfillmentStrategy;
	}
	
	public EnumRule getFulfillmentStrategyRule() {
		return getFulfillmentStrategyAccess().getRule();
	}

	//Rule:
	//	'Rule' name=ID '(' effect=Effect ('target:' target=Expression)? ('obl:' obl+=Obligation*)? ')';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//enum Effect:
	//	PERMIT='permit' | DENY='deny';
	public EffectElements getEffectAccess() {
		return eEffect;
	}
	
	public EnumRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	////EXPRESSION
	//Expression:
	//	AndExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AndExpression Expression:
	//	OrExpression ({AndExpression.left=current} '&&' right=OrExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OrExpression Expression:
	//	BasicExpression ({OrExpression.left=current} '||' right=BasicExpression)*
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//BasicExpression Expression:
	//	Function | DeclaredFunction | '(' Expression ')' | NotExpression | Literals
	public BasicExpressionElements getBasicExpressionAccess() {
		return pBasicExpression;
	}
	
	public ParserRule getBasicExpressionRule() {
		return getBasicExpressionAccess().getRule();
	}

	//NotExpression:
	//	'!' arg=BasicExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//Function:
	//	functionId=funID '(' (arg1=Expression | 'status' '/' att1=[Attribute]) ',' (arg2=Expression | 'status' '/'
	//	att2=[Attribute]) ')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	////Invocation of declared function 
	//DeclaredFunction:
	//	functionId=[FunctionDeclaration] "(" args+=Expression (',' args+=Expression)* ")";
	public DeclaredFunctionElements getDeclaredFunctionAccess() {
		return pDeclaredFunction;
	}
	
	public ParserRule getDeclaredFunctionRule() {
		return getDeclaredFunctionAccess().getRule();
	}

	//enum funID:
	//	EQUAL='equal' | N_EQUAL='not-equal' |
	//	LESS='less-than' | LESS_EQ='less-than-or-equal' |
	//	GREATER='greater-than' | GREATER_EQ='greater-than-or-equal' |
	//	IN='in' | ADD='addition' | SUBTRACT='subtract' | DIVIDE='divide' |
	//	MULTIPLY='multiply';
	public FunIDElements getFunIDAccess() {
		return eFunID;
	}
	
	public EnumRule getFunIDRule() {
		return getFunIDAccess().getRule();
	}

	//Literals Expression:
	//	IntLiteral
	//	| DoubleLiteral
	//	| BooleanLiteral
	//	| StringLiteral
	//	| DateLiteral
	//	| TimeLiteral
	//	| AttributeName
	//	| Set
	public LiteralsElements getLiteralsAccess() {
		return pLiterals;
	}
	
	public ParserRule getLiteralsRule() {
		return getLiteralsAccess().getRule();
	}

	//Set:
	//	'set(' (args+=Literals (',' args+=Literals)*) ')';
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value=BOOLEAN;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//IntLiteral:
	//	value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//DoubleLiteral:
	//	value=REAL;
	public DoubleLiteralElements getDoubleLiteralAccess() {
		return pDoubleLiteral;
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}

	//DateLiteral:
	//	value=DATE;
	public DateLiteralElements getDateLiteralAccess() {
		return pDateLiteral;
	}
	
	public ParserRule getDateLiteralRule() {
		return getDateLiteralAccess().getRule();
	}

	//TimeLiteral:
	//	value=TIME;
	public TimeLiteralElements getTimeLiteralAccess() {
		return pTimeLiteral;
	}
	
	public ParserRule getTimeLiteralRule() {
		return getTimeLiteralAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal DATE:
	//	INT '/' INT '/' INT;
	public TerminalRule getDATERule() {
		return tDATE;
	} 

	//terminal TIME:
	//	INT ':' INT ':' INT;
	public TerminalRule getTIMERule() {
		return tTIME;
	} 

	//terminal REAL returns ecore::EDouble:
	//	('+' | '-')? '0'..'9'* ('.' '0'..'9'+)?;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"' | '/'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'" | '/'))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
