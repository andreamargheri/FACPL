/*
 * generated by Xtext
 */
grammar InternalFacpl2;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package it.unifi.xtext.facpl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package it.unifi.xtext.facpl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import it.unifi.xtext.facpl.services.Facpl2GrammarAccess;

}

@parser::members {

 	private Facpl2GrammarAccess grammarAccess;
 	
    public InternalFacpl2Parser(TokenStream input, Facpl2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Facpl";	
   	}
   	
   	@Override
   	protected Facpl2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFacpl
entryRuleFacpl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFacplRule()); }
	 iv_ruleFacpl=ruleFacpl 
	 { $current=$iv_ruleFacpl.current; } 
	 EOF 
;

// Rule Facpl
ruleFacpl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getFacplAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFacplAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFacplAccess().getUnorderedGroup(), 0);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getFacplAccess().getImportElImportParserRuleCall_0_0()); 
	    }
		lv_importEl_1_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFacplRule());
	        }
       		add(
       			$current, 
       			"importEl",
        		lv_importEl_1_0, 
        		"it.unifi.xtext.facpl.Facpl2.Import");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFacplAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFacplAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFacplAccess().getUnorderedGroup(), 1);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getFacplAccess().getDeclarationsFunctionDeclarationParserRuleCall_1_0()); 
	    }
		lv_declarations_2_0=ruleFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFacplRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_2_0, 
        		"it.unifi.xtext.facpl.Facpl2.FunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFacplAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFacplAccess().getUnorderedGroup(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFacplAccess().getUnorderedGroup(), 2);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getFacplAccess().getPoliciesPolicySetParserRuleCall_2_0()); 
	    }
		lv_policies_3_0=rulePolicySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFacplRule());
	        }
       		add(
       			$current, 
       			"policies",
        		lv_policies_3_0, 
        		"it.unifi.xtext.facpl.Facpl2.PolicySet");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFacplAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFacplAccess().getUnorderedGroup(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFacplAccess().getUnorderedGroup(), 3);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getFacplAccess().getRequestsRequestParserRuleCall_3_0()); 
	    }
		lv_requests_4_0=ruleRequest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFacplRule());
	        }
       		add(
       			$current, 
       			"requests",
        		lv_requests_4_0, 
        		"it.unifi.xtext.facpl.Facpl2.Request");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFacplAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFacplAccess().getUnorderedGroup(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFacplAccess().getUnorderedGroup(), 4);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getFacplAccess().getMainMainFacplParserRuleCall_4_0()); 
	    }
		lv_main_5_0=ruleMainFacpl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFacplRule());
	        }
       		set(
       			$current, 
       			"main",
        		lv_main_5_0, 
        		"it.unifi.xtext.facpl.Facpl2.MainFacpl");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFacplAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getFacplAccess().getUnorderedGroup());
	}

)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"it.unifi.xtext.facpl.Facpl2.STRING");
	    }

)
))
;





// Entry rule entryRuleMainFacpl
entryRuleMainFacpl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainFacplRule()); }
	 iv_ruleMainFacpl=ruleMainFacpl 
	 { $current=$iv_ruleMainFacpl.current; } 
	 EOF 
;

// Rule MainFacpl
ruleMainFacpl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PAS' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMainFacplAccess().getPASKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMainFacplAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='Extended Indeterminate' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMainFacplAccess().getExtendedIndeterminateKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMainFacplAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainFacplAccess().getExtIndetBooleanLiteralParserRuleCall_4_0()); 
	    }
		lv_extIndet_4_0=ruleBooleanLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainFacplRule());
	        }
       		set(
       			$current, 
       			"extIndet",
        		lv_extIndet_4_0, 
        		"it.unifi.xtext.facpl.Facpl2.BooleanLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMainFacplAccess().getSemicolonKeyword_5());
    }
(	otherlv_6='Java Package' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMainFacplAccess().getJavaPackageKeyword_6_0());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMainFacplAccess().getColonKeyword_6_1());
    }
(
(
		lv_genPackage_8_0=RULE_STRING
		{
			newLeafNode(lv_genPackage_8_0, grammarAccess.getMainFacplAccess().getGenPackageSTRINGTerminalRuleCall_6_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMainFacplRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"genPackage",
        		lv_genPackage_8_0, 
        		"it.unifi.xtext.facpl.Facpl2.STRING");
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMainFacplAccess().getSemicolonKeyword_6_3());
    }
)?(	otherlv_10='Requests To Evaluate' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMainFacplAccess().getRequestsToEvaluateKeyword_7_0());
    }
	otherlv_11=':' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMainFacplAccess().getColonKeyword_7_1());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMainFacplRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getMainFacplAccess().getRefRequestRequestCrossReference_7_2_0_0()); 
	}

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMainFacplAccess().getCommaKeyword_7_2_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMainFacplRule());
	        }
        }
	otherlv_14=RULE_ID
	{
		newLeafNode(otherlv_14, grammarAccess.getMainFacplAccess().getRefRequestRequestCrossReference_7_2_1_1_0()); 
	}

)
))*)	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMainFacplAccess().getSemicolonKeyword_7_3());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMainFacplAccess().getPafPAFParserRuleCall_8_0()); 
	    }
		lv_paf_16_0=rulePAF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainFacplRule());
	        }
       		set(
       			$current, 
       			"paf",
        		lv_paf_16_0, 
        		"it.unifi.xtext.facpl.Facpl2.PAF");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMainFacplAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dec-fun' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getDecFunKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getTypeTypeLiteralEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"it.unifi.xtext.facpl.Facpl2.TypeLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getArgsTypeLiteralEnumRuleCall_4_0()); 
	    }
		lv_args_4_0=ruleTypeLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"it.unifi.xtext.facpl.Facpl2.TypeLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getArgsTypeLiteralEnumRuleCall_5_1_0()); 
	    }
		lv_args_6_0=ruleTypeLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_6_0, 
        		"it.unifi.xtext.facpl.Facpl2.TypeLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRulePAF
entryRulePAF returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPAFRule()); }
	 iv_rulePAF=rulePAF 
	 { $current=$iv_rulePAF.current; } 
	 EOF 
;

// Rule PAF
rulePAF returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pep:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPAFAccess().getPepKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPAFAccess().getPepPEPAlgEnumRuleCall_1_0()); 
	    }
		lv_pep_1_0=rulePEPAlg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPAFRule());
	        }
       		set(
       			$current, 
       			"pep",
        		lv_pep_1_0, 
        		"it.unifi.xtext.facpl.Facpl2.PEPAlg");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='pdp:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPAFAccess().getPdpKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPAFAccess().getPdpPDPParserRuleCall_3_0()); 
	    }
		lv_pdp_3_0=rulePDP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPAFRule());
	        }
       		set(
       			$current, 
       			"pdp",
        		lv_pdp_3_0, 
        		"it.unifi.xtext.facpl.Facpl2.PDP");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRequest
entryRuleRequest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequestRule()); }
	 iv_ruleRequest=ruleRequest 
	 { $current=$iv_ruleRequest.current; } 
	 EOF 
;

// Rule Request
ruleRequest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Request:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequestAccess().getRequestKeyword_0());
    }
(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRequestAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		lv_stub_2_0=RULE_STRING
		{
			newLeafNode(lv_stub_2_0, grammarAccess.getRequestAccess().getStubSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stub",
        		lv_stub_2_0, 
        		"it.unifi.xtext.facpl.Facpl2.STRING");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRequestAccess().getRightSquareBracketKeyword_1_2());
    }
)?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequestAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getRequestAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRequestAccess().getAttributesAttributeReqParserRuleCall_4_0()); 
	    }
		lv_attributes_6_0=ruleAttributeReq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequestRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_6_0, 
        		"it.unifi.xtext.facpl.Facpl2.AttributeReq");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRequestAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAttributeReq
entryRuleAttributeReq returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeReqRule()); }
	 iv_ruleAttributeReq=ruleAttributeReq 
	 { $current=$iv_ruleAttributeReq.current; } 
	 EOF 
;

// Rule AttributeReq
ruleAttributeReq returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeReqAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeReqAccess().getNameAttributeNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeReqRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"it.unifi.xtext.facpl.Facpl2.AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeReqAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeReqAccess().getValueLiteralsParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleLiterals		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeReqRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"it.unifi.xtext.facpl.Facpl2.Literals");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeReqAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeReqAccess().getValueLiteralsParserRuleCall_4_1_0()); 
	    }
		lv_value_5_0=ruleLiterals		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeReqRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"it.unifi.xtext.facpl.Facpl2.Literals");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttributeReqAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleAttributeName
entryRuleAttributeName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeNameRule()); }
	 iv_ruleAttributeName=ruleAttributeName 
	 { $current=$iv_ruleAttributeName.current; } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeNameAccess().getCategorySTRING_OParserRuleCall_0_0()); 
	    }
		lv_category_0_0=ruleSTRING_O		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeNameRule());
	        }
       		set(
       			$current, 
       			"category",
        		lv_category_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.STRING_O");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeNameAccess().getSolidusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeNameAccess().getIdSTRING_OParserRuleCall_2_0()); 
	    }
		lv_id_2_0=ruleSTRING_O		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeNameRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"it.unifi.xtext.facpl.Facpl2.STRING_O");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSTRING_O
entryRuleSTRING_O returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSTRING_ORule()); } 
	 iv_ruleSTRING_O=ruleSTRING_O 
	 { $current=$iv_ruleSTRING_O.current.getText(); }  
	 EOF 
;

// Rule STRING_O
ruleSTRING_O returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getSTRING_OAccess().getIDTerminalRuleCall_0()); 
    }
((
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTRING_OAccess().getColonKeyword_1_0_0()); 
    }

    |
	kw='_' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTRING_OAccess().get_Keyword_1_0_1()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTRING_OAccess().getHyphenMinusKeyword_1_0_2()); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTRING_OAccess().getFullStopKeyword_1_0_3()); 
    }
)    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getSTRING_OAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRulePDP
entryRulePDP returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPDPRule()); }
	 iv_rulePDP=rulePDP 
	 { $current=$iv_rulePDP.current; } 
	 EOF 
;

// Rule PDP
rulePDP returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPDPAccess().getPdpAlgAlgParserRuleCall_0_0()); 
	    }
		lv_pdpAlg_0_0=ruleAlg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPDPRule());
	        }
       		set(
       			$current, 
       			"pdpAlg",
        		lv_pdpAlg_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.Alg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPDPAccess().getPolSetAbstractPolicyInclParserRuleCall_1_0()); 
	    }
		lv_polSet_1_0=ruleAbstractPolicyIncl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPDPRule());
	        }
       		add(
       			$current, 
       			"polSet",
        		lv_polSet_1_0, 
        		"it.unifi.xtext.facpl.Facpl2.AbstractPolicyIncl");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleFacplPolicy
entryRuleFacplPolicy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFacplPolicyRule()); }
	 iv_ruleFacplPolicy=ruleFacplPolicy 
	 { $current=$iv_ruleFacplPolicy.current; } 
	 EOF 
;

// Rule FacplPolicy
ruleFacplPolicy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFacplPolicyAccess().getPolicySetParserRuleCall_0()); 
    }
    this_PolicySet_0=rulePolicySet
    { 
        $current = $this_PolicySet_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFacplPolicyAccess().getRuleParserRuleCall_1()); 
    }
    this_Rule_1=ruleRule
    { 
        $current = $this_Rule_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAbstractPolicyIncl
entryRuleAbstractPolicyIncl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractPolicyInclRule()); }
	 iv_ruleAbstractPolicyIncl=ruleAbstractPolicyIncl 
	 { $current=$iv_ruleAbstractPolicyIncl.current; } 
	 EOF 
;

// Rule AbstractPolicyIncl
ruleAbstractPolicyIncl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractPolicyInclAccess().getNewPolicyFacplPolicyParserRuleCall_0_0()); 
	    }
		lv_newPolicy_0_0=ruleFacplPolicy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractPolicyInclRule());
	        }
       		set(
       			$current, 
       			"newPolicy",
        		lv_newPolicy_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.FacplPolicy");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='include' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbstractPolicyInclAccess().getIncludeKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractPolicyInclRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getAbstractPolicyInclAccess().getRefPolPolicySetCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRulePolicySet
entryRulePolicySet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPolicySetRule()); }
	 iv_rulePolicySet=rulePolicySet 
	 { $current=$iv_rulePolicySet.current; } 
	 EOF 
;

// Rule PolicySet
rulePolicySet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PolicySet' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPolicySetAccess().getPolicySetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPolicySetAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPolicySetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPolicySetAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPolicySetAccess().getPolSetAlgAlgParserRuleCall_3_0()); 
	    }
		lv_polSetAlg_3_0=ruleAlg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPolicySetRule());
	        }
       		set(
       			$current, 
       			"polSetAlg",
        		lv_polSetAlg_3_0, 
        		"it.unifi.xtext.facpl.Facpl2.Alg");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='target:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPolicySetAccess().getTargetKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPolicySetAccess().getTargetExpressionParserRuleCall_4_1_0()); 
	    }
		lv_target_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPolicySetRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_5_0, 
        		"it.unifi.xtext.facpl.Facpl2.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='policies:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPolicySetAccess().getPoliciesKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPolicySetAccess().getPoliciesAbstractPolicyInclParserRuleCall_6_0()); 
	    }
		lv_policies_7_0=ruleAbstractPolicyIncl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPolicySetRule());
	        }
       		add(
       			$current, 
       			"policies",
        		lv_policies_7_0, 
        		"it.unifi.xtext.facpl.Facpl2.AbstractPolicyIncl");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_8='obl:' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPolicySetAccess().getOblKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPolicySetAccess().getOblObligationParserRuleCall_7_1_0()); 
	    }
		lv_obl_9_0=ruleObligation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPolicySetRule());
	        }
       		add(
       			$current, 
       			"obl",
        		lv_obl_9_0, 
        		"it.unifi.xtext.facpl.Facpl2.Obligation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPolicySetAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleAlg
entryRuleAlg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlgRule()); }
	 iv_ruleAlg=ruleAlg 
	 { $current=$iv_ruleAlg.current; } 
	 EOF 
;

// Rule Alg
ruleAlg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAlgAccess().getIdAlgAlgLiteralEnumRuleCall_0_0()); 
	    }
		lv_idAlg_0_0=ruleAlgLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlgRule());
	        }
       		set(
       			$current, 
       			"idAlg",
        		lv_idAlg_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.AlgLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAlgAccess().getHyphenMinusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlgAccess().getFStrategyFulfillmentStrategyEnumRuleCall_1_1_0()); 
	    }
		lv_fStrategy_2_0=ruleFulfillmentStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlgRule());
	        }
       		set(
       			$current, 
       			"fStrategy",
        		lv_fStrategy_2_0, 
        		"it.unifi.xtext.facpl.Facpl2.FulfillmentStrategy");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getEffectEffectEnumRuleCall_3_0()); 
	    }
		lv_effect_3_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"effect",
        		lv_effect_3_0, 
        		"it.unifi.xtext.facpl.Facpl2.Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='target:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getTargetKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getTargetExpressionParserRuleCall_4_1_0()); 
	    }
		lv_target_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_5_0, 
        		"it.unifi.xtext.facpl.Facpl2.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='obl:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getOblKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getOblObligationParserRuleCall_5_1_0()); 
	    }
		lv_obl_7_0=ruleObligation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"obl",
        		lv_obl_7_0, 
        		"it.unifi.xtext.facpl.Facpl2.Obligation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRuleAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleObligation
entryRuleObligation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObligationRule()); }
	 iv_ruleObligation=ruleObligation 
	 { $current=$iv_ruleObligation.current; } 
	 EOF 
;

// Rule Obligation
ruleObligation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getObligationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObligationAccess().getEvaluetedOnEffectEnumRuleCall_1_0()); 
	    }
		lv_EvaluetedOn_1_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObligationRule());
	        }
       		set(
       			$current, 
       			"EvaluetedOn",
        		lv_EvaluetedOn_1_0, 
        		"it.unifi.xtext.facpl.Facpl2.Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		lv_typeObl_2_1=	'M' 
    {
        newLeafNode(lv_typeObl_2_1, grammarAccess.getObligationAccess().getTypeOblMKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObligationRule());
	        }
       		setWithLastConsumed($current, "typeObl", lv_typeObl_2_1, null);
	    }

    |		lv_typeObl_2_2=	'O' 
    {
        newLeafNode(lv_typeObl_2_2, grammarAccess.getObligationAccess().getTypeOblOKeyword_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObligationRule());
	        }
       		setWithLastConsumed($current, "typeObl", lv_typeObl_2_2, null);
	    }

)

)
)(
(
		lv_pepAction_3_0=RULE_ID
		{
			newLeafNode(lv_pepAction_3_0, grammarAccess.getObligationAccess().getPepActionIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObligationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pepAction",
        		lv_pepAction_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObligationAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getObligationAccess().getExprExpressionParserRuleCall_5_0_0()); 
	    }
		lv_expr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObligationRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"it.unifi.xtext.facpl.Facpl2.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getObligationAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObligationAccess().getExprExpressionParserRuleCall_5_1_1_0()); 
	    }
		lv_expr_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObligationRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_7_0, 
        		"it.unifi.xtext.facpl.Facpl2.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getObligationAccess().getRightParenthesisKeyword_6());
    }
	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getObligationAccess().getRightSquareBracketKeyword_7());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getOrExpressionParserRuleCall_0()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"it.unifi.xtext.facpl.Facpl2.OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getBasicExpressionParserRuleCall_0()); 
    }
    this_BasicExpression_0=ruleBasicExpression
    { 
        $current = $this_BasicExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightBasicExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBasicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"it.unifi.xtext.facpl.Facpl2.BasicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBasicExpression
entryRuleBasicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicExpressionRule()); }
	 iv_ruleBasicExpression=ruleBasicExpression 
	 { $current=$iv_ruleBasicExpression.current; } 
	 EOF 
;

// Rule BasicExpression
ruleBasicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getFunctionParserRuleCall_0()); 
    }
    this_Function_0=ruleFunction
    { 
        $current = $this_Function_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getDeclaredFunctionParserRuleCall_1()); 
    }
    this_DeclaredFunction_1=ruleDeclaredFunction
    { 
        $current = $this_DeclaredFunction_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBasicExpressionAccess().getLeftParenthesisKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getExpressionParserRuleCall_2_1()); 
    }
    this_Expression_3=ruleExpression
    { 
        $current = $this_Expression_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBasicExpressionAccess().getRightParenthesisKeyword_2_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getNotExpressionParserRuleCall_3()); 
    }
    this_NotExpression_5=ruleNotExpression
    { 
        $current = $this_NotExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getLiteralsParserRuleCall_4()); 
    }
    this_Literals_6=ruleLiterals
    { 
        $current = $this_Literals_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getArgBasicExpressionParserRuleCall_1_0()); 
	    }
		lv_arg_1_0=ruleBasicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_1_0, 
        		"it.unifi.xtext.facpl.Facpl2.BasicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getFunctionIdFunIDEnumRuleCall_0_0()); 
	    }
		lv_functionId_0_0=rulefunID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"functionId",
        		lv_functionId_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.funID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getArg1ExpressionParserRuleCall_2_0()); 
	    }
		lv_arg1_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_2_0, 
        		"it.unifi.xtext.facpl.Facpl2.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getArg2ExpressionParserRuleCall_4_0()); 
	    }
		lv_arg2_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_4_0, 
        		"it.unifi.xtext.facpl.Facpl2.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleDeclaredFunction
entryRuleDeclaredFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaredFunctionRule()); }
	 iv_ruleDeclaredFunction=ruleDeclaredFunction 
	 { $current=$iv_ruleDeclaredFunction.current; } 
	 EOF 
;

// Rule DeclaredFunction
ruleDeclaredFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclaredFunctionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getDeclaredFunctionAccess().getFunctionIdFunctionDeclarationCrossReference_0_0()); 
	}

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclaredFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaredFunctionAccess().getArgsExpressionParserRuleCall_2_0()); 
	    }
		lv_args_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaredFunctionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"it.unifi.xtext.facpl.Facpl2.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDeclaredFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaredFunctionAccess().getArgsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_args_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaredFunctionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"it.unifi.xtext.facpl.Facpl2.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDeclaredFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleLiterals
entryRuleLiterals returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralsRule()); }
	 iv_ruleLiterals=ruleLiterals 
	 { $current=$iv_ruleLiterals.current; } 
	 EOF 
;

// Rule Literals
ruleLiterals returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralsAccess().getIntLiteralParserRuleCall_0()); 
    }
    this_IntLiteral_0=ruleIntLiteral
    { 
        $current = $this_IntLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralsAccess().getDoubleLiteralParserRuleCall_1()); 
    }
    this_DoubleLiteral_1=ruleDoubleLiteral
    { 
        $current = $this_DoubleLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralsAccess().getBooleanLiteralParserRuleCall_2()); 
    }
    this_BooleanLiteral_2=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralsAccess().getStringLiteralParserRuleCall_3()); 
    }
    this_StringLiteral_3=ruleStringLiteral
    { 
        $current = $this_StringLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralsAccess().getDateLiteralParserRuleCall_4()); 
    }
    this_DateLiteral_4=ruleDateLiteral
    { 
        $current = $this_DateLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralsAccess().getTimeLiteralParserRuleCall_5()); 
    }
    this_TimeLiteral_5=ruleTimeLiteral
    { 
        $current = $this_TimeLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralsAccess().getAttributeNameParserRuleCall_6()); 
    }
    this_AttributeName_6=ruleAttributeName
    { 
        $current = $this_AttributeName_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralsAccess().getSetParserRuleCall_7()); 
    }
    this_Set_7=ruleSet
    { 
        $current = $this_Set_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSet
entryRuleSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	 iv_ruleSet=ruleSet 
	 { $current=$iv_ruleSet.current; } 
	 EOF 
;

// Rule Set
ruleSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='set(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetAccess().getSetKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSetAccess().getArgsLiteralsParserRuleCall_1_0_0()); 
	    }
		lv_args_1_0=ruleLiterals		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_1_0, 
        		"it.unifi.xtext.facpl.Facpl2.Literals");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAccess().getArgsLiteralsParserRuleCall_1_1_1_0()); 
	    }
		lv_args_3_0=ruleLiterals		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"it.unifi.xtext.facpl.Facpl2.Literals");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSetAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.STRING");
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.BOOLEAN");
	    }

)
)
;





// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	 iv_ruleIntLiteral=ruleIntLiteral 
	 { $current=$iv_ruleIntLiteral.current; } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.INT");
	    }

)
)
;





// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleLiteralRule()); }
	 iv_ruleDoubleLiteral=ruleDoubleLiteral 
	 { $current=$iv_ruleDoubleLiteral.current; } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_REAL
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDoubleLiteralAccess().getValueREALTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.REAL");
	    }

)
)
;





// Entry rule entryRuleDateLiteral
entryRuleDateLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateLiteralRule()); }
	 iv_ruleDateLiteral=ruleDateLiteral 
	 { $current=$iv_ruleDateLiteral.current; } 
	 EOF 
;

// Rule DateLiteral
ruleDateLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_DATE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDateLiteralAccess().getValueDATETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.DATE");
	    }

)
)
;





// Entry rule entryRuleTimeLiteral
entryRuleTimeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeLiteralRule()); }
	 iv_ruleTimeLiteral=ruleTimeLiteral 
	 { $current=$iv_ruleTimeLiteral.current; } 
	 EOF 
;

// Rule TimeLiteral
ruleTimeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_TIME
		{
			newLeafNode(lv_value_0_0, grammarAccess.getTimeLiteralAccess().getValueTIMETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"it.unifi.xtext.facpl.Facpl2.TIME");
	    }

)
)
;





// Rule TypeLiteral
ruleTypeLiteral returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Int' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getIntEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeLiteralAccess().getIntEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Double' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getDoubleEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeLiteralAccess().getDoubleEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Bool' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getBoolEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTypeLiteralAccess().getBoolEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='String' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getStringEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTypeLiteralAccess().getStringEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='DateTime' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getDateTimeEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTypeLiteralAccess().getDateTimeEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Set<Int>' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getSetIntEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTypeLiteralAccess().getSetIntEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Set<Double>' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getSetDoubleEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getTypeLiteralAccess().getSetDoubleEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Set<Bool>' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getSetBoolEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getTypeLiteralAccess().getSetBoolEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='Set<String>' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getSetStringEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getTypeLiteralAccess().getSetStringEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='Set<DateTime>' 
	{
        $current = grammarAccess.getTypeLiteralAccess().getSetDateTimeEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getTypeLiteralAccess().getSetDateTimeEnumLiteralDeclaration_9()); 
    }
));



// Rule PEPAlg
rulePEPAlg returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='base' 
	{
        $current = grammarAccess.getPEPAlgAccess().getBASEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPEPAlgAccess().getBASEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='deny-biased' 
	{
        $current = grammarAccess.getPEPAlgAccess().getDENYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPEPAlgAccess().getDENYEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='permit-biased' 
	{
        $current = grammarAccess.getPEPAlgAccess().getPERMITEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPEPAlgAccess().getPERMITEnumLiteralDeclaration_2()); 
    }
));



// Rule AlgLiteral
ruleAlgLiteral returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='only-one-applicable' 
	{
        $current = grammarAccess.getAlgLiteralAccess().getONLY_ONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAlgLiteralAccess().getONLY_ONEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='deny-overrides' 
	{
        $current = grammarAccess.getAlgLiteralAccess().getDENY_OVEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAlgLiteralAccess().getDENY_OVEREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='permit-overrides' 
	{
        $current = grammarAccess.getAlgLiteralAccess().getPERMIT_OVEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAlgLiteralAccess().getPERMIT_OVEREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='first-applicable' 
	{
        $current = grammarAccess.getAlgLiteralAccess().getFIRSTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAlgLiteralAccess().getFIRSTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='deny-unless-permit' 
	{
        $current = grammarAccess.getAlgLiteralAccess().getDENY_UNLESSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAlgLiteralAccess().getDENY_UNLESSEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='permit-unless-deny' 
	{
        $current = grammarAccess.getAlgLiteralAccess().getPERMIT_UNLESSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAlgLiteralAccess().getPERMIT_UNLESSEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='weak-consensus' 
	{
        $current = grammarAccess.getAlgLiteralAccess().getWEAK_CONSEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAlgLiteralAccess().getWEAK_CONSEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='strong-consensus' 
	{
        $current = grammarAccess.getAlgLiteralAccess().getSTRONG_CONSEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getAlgLiteralAccess().getSTRONG_CONSEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='custom-algorithm' 
	{
        $current = grammarAccess.getAlgLiteralAccess().getCUSTOM_ALGEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getAlgLiteralAccess().getCUSTOM_ALGEnumLiteralDeclaration_8()); 
    }
));



// Rule FulfillmentStrategy
ruleFulfillmentStrategy returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='greedy' 
	{
        $current = grammarAccess.getFulfillmentStrategyAccess().getGREEDYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFulfillmentStrategyAccess().getGREEDYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='all' 
	{
        $current = grammarAccess.getFulfillmentStrategyAccess().getALLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFulfillmentStrategyAccess().getALLEnumLiteralDeclaration_1()); 
    }
));



// Rule Effect
ruleEffect returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='permit' 
	{
        $current = grammarAccess.getEffectAccess().getPERMITEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEffectAccess().getPERMITEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='deny' 
	{
        $current = grammarAccess.getEffectAccess().getDENYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEffectAccess().getDENYEnumLiteralDeclaration_1()); 
    }
));



// Rule funID
rulefunID returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='equal' 
	{
        $current = grammarAccess.getFunIDAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFunIDAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='not-equal' 
	{
        $current = grammarAccess.getFunIDAccess().getN_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFunIDAccess().getN_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='less-than' 
	{
        $current = grammarAccess.getFunIDAccess().getLESSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFunIDAccess().getLESSEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='less-than-or-equal' 
	{
        $current = grammarAccess.getFunIDAccess().getLESS_EQEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFunIDAccess().getLESS_EQEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='greater-than' 
	{
        $current = grammarAccess.getFunIDAccess().getGREATEREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFunIDAccess().getGREATEREnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='greater-than-or-equal' 
	{
        $current = grammarAccess.getFunIDAccess().getGREATER_EQEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFunIDAccess().getGREATER_EQEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='in' 
	{
        $current = grammarAccess.getFunIDAccess().getINEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFunIDAccess().getINEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='addition' 
	{
        $current = grammarAccess.getFunIDAccess().getADDEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getFunIDAccess().getADDEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='subtract' 
	{
        $current = grammarAccess.getFunIDAccess().getSUBTRACTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getFunIDAccess().getSUBTRACTEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='divide' 
	{
        $current = grammarAccess.getFunIDAccess().getDIVIDEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getFunIDAccess().getDIVIDEEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='multiply' 
	{
        $current = grammarAccess.getFunIDAccess().getMULTIPLYEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getFunIDAccess().getMULTIPLYEnumLiteralDeclaration_10()); 
    }
));



RULE_BOOLEAN : ('true'|'false');

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_DATE : RULE_INT '/' RULE_INT '/' RULE_INT;

RULE_TIME : RULE_INT ':' RULE_INT ':' RULE_INT;

RULE_REAL : ('+'|'-')? ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"'|'/')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\''|'/')))* '\'');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


