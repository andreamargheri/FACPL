/**
 * generated by Xtext
 */
package it.unifi.xtext.facpl.formatting;

import com.google.inject.Inject;
import it.unifi.xtext.facpl.services.Facpl2GrammarAccess;
import java.util.List;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class Facpl2Formatter extends AbstractDeclarativeFormatter {
  @Inject
  @Extension
  private Facpl2GrammarAccess _facpl2GrammarAccess;
  
  @Override
  protected void configureFormatting(final FormattingConfig c) {
    FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap(0, 1, 2);
    TerminalRule _sL_COMMENTRule = this._facpl2GrammarAccess.getSL_COMMENTRule();
    _setLinewrap.before(_sL_COMMENTRule);
    FormattingConfig.LinewrapLocator _setLinewrap_1 = c.setLinewrap(0, 1, 2);
    TerminalRule _mL_COMMENTRule = this._facpl2GrammarAccess.getML_COMMENTRule();
    _setLinewrap_1.before(_mL_COMMENTRule);
    FormattingConfig.LinewrapLocator _setLinewrap_2 = c.setLinewrap(0, 1, 1);
    TerminalRule _mL_COMMENTRule_1 = this._facpl2GrammarAccess.getML_COMMENTRule();
    _setLinewrap_2.after(_mL_COMMENTRule_1);
    IGrammarAccess _grammarAccess = this.getGrammarAccess();
    Facpl2GrammarAccess f = ((Facpl2GrammarAccess) _grammarAccess);
    c.setAutoLinewrap(120);
    FormattingConfig.LinewrapLocator _setLinewrap_3 = c.setLinewrap(1, 2, 3);
    ParserRule _importRule = f.getImportRule();
    _setLinewrap_3.around(_importRule);
    FormattingConfig.LinewrapLocator _setLinewrap_4 = c.setLinewrap(1, 2, 3);
    ParserRule _mainFacplRule = f.getMainFacplRule();
    _setLinewrap_4.around(_mainFacplRule);
    FormattingConfig.LinewrapLocator _setLinewrap_5 = c.setLinewrap(1, 2, 2);
    ParserRule _pDPRule = f.getPDPRule();
    _setLinewrap_5.after(_pDPRule);
    FormattingConfig.LinewrapLocator _setLinewrap_6 = c.setLinewrap(1, 1, 2);
    EnumRule _pEPAlgRule = f.getPEPAlgRule();
    _setLinewrap_6.after(_pEPAlgRule);
    FormattingConfig.LinewrapLocator _setLinewrap_7 = c.setLinewrap(1, 1, 1);
    ParserRule _algRule = f.getAlgRule();
    _setLinewrap_7.after(_algRule);
    FormattingConfig.LinewrapLocator _setLinewrap_8 = c.setLinewrap(1, 1, 2);
    ParserRule _policySetRule = f.getPolicySetRule();
    _setLinewrap_8.around(_policySetRule);
    List<Pair<Keyword, Keyword>> pairsPolSet = f.findKeywordPairs("{", "}");
    for (final Pair<Keyword, Keyword> pair : pairsPolSet) {
      Keyword _first = pair.getFirst();
      Keyword _second = pair.getSecond();
      c.setIndentation(_first, _second);
    }
    FormattingConfig.LinewrapLocator _setLinewrap_9 = c.setLinewrap(1, 1, 2);
    ParserRule _ruleRule = f.getRuleRule();
    _setLinewrap_9.around(_ruleRule);
    List<Pair<Keyword, Keyword>> pairsRule = f.findKeywordPairs("(", ")");
    for (final Pair<Keyword, Keyword> pair_1 : pairsRule) {
      Keyword _first_1 = pair_1.getFirst();
      Keyword _second_1 = pair_1.getSecond();
      c.setIndentation(_first_1, _second_1);
    }
    List<Pair<Keyword, Keyword>> pairsTarget = f.findKeywordPairs("target:", " ");
    for (final Pair<Keyword, Keyword> pair_2 : pairsTarget) {
      {
        Keyword _first_2 = pair_2.getFirst();
        Keyword _second_2 = pair_2.getSecond();
        c.setIndentation(_first_2, _second_2);
        FormattingConfig.LinewrapLocator _setLinewrap_10 = c.setLinewrap(1, 1, 2);
        Keyword _second_3 = pair_2.getSecond();
        _setLinewrap_10.after(_second_3);
      }
    }
    List<Pair<Keyword, Keyword>> pairsPolicies = f.findKeywordPairs("policies:", " ");
    for (final Pair<Keyword, Keyword> pair_3 : pairsPolicies) {
      {
        Keyword _first_2 = pair_3.getFirst();
        Keyword _second_2 = pair_3.getSecond();
        c.setIndentation(_first_2, _second_2);
        FormattingConfig.LinewrapLocator _setLinewrap_10 = c.setLinewrap(1, 1, 2);
        Keyword _second_3 = pair_3.getSecond();
        _setLinewrap_10.after(_second_3);
        FormattingConfig.LinewrapLocator _setLinewrap_11 = c.setLinewrap(1, 1, 2);
        Keyword _first_3 = pair_3.getFirst();
        _setLinewrap_11.before(_first_3);
      }
    }
    FormattingConfig.LinewrapLocator _setLinewrap_10 = c.setLinewrap();
    ParserRule _obligationRule = f.getObligationRule();
    _setLinewrap_10.around(_obligationRule);
    List<Pair<Keyword, Keyword>> pairsObligation = f.findKeywordPairs("obl:", " ");
    for (final Pair<Keyword, Keyword> pair_4 : pairsObligation) {
      Keyword _first_2 = pair_4.getFirst();
      Keyword _second_2 = pair_4.getSecond();
      c.setIndentation(_first_2, _second_2);
    }
    List<Pair<Keyword, Keyword>> pairsMain = f.findKeywordPairs("Extended Indeterminate", ";");
    List<Pair<Keyword, Keyword>> _findKeywordPairs = f.findKeywordPairs("Java Package", ";");
    pairsMain.addAll(_findKeywordPairs);
    List<Pair<Keyword, Keyword>> _findKeywordPairs_1 = f.findKeywordPairs("Requests To Evaluate", ";");
    pairsMain.addAll(_findKeywordPairs_1);
    for (final Pair<Keyword, Keyword> p : pairsMain) {
      FormattingConfig.LinewrapLocator _setLinewrap_11 = c.setLinewrap(1, 1, 2);
      Keyword _second_3 = p.getSecond();
      _setLinewrap_11.after(_second_3);
    }
  }
}
