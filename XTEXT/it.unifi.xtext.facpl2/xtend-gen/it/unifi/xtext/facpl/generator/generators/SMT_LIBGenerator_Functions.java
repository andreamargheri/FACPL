package it.unifi.xtext.facpl.generator.generators;

import it.unifi.xtext.facpl.facpl2.funID;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class SMT_LIBGenerator_Functions {
  public static CharSequence getBoolFunctions() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(define-fun isFalse ((x (TValue Bool))) Bool");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (= x (mk-val false false false)) true false)");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun isTrue ((x (TValue Bool))) Bool");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (= x (mk-val true false false)) true false)");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun isBool ((x (TValue Bool))) Bool");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (isFalse x) (isTrue x))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("true");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("false");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun isNotBoolValue ((x (TValue Bool))) Bool");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (isFalse x) (isTrue x)) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("false");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (and (not (miss x)) (not (err x)))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("true");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("false");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun FAnd ((x (TValue Bool)) (y (TValue Bool))) (TValue Bool)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (and (isTrue x) (isTrue y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (isFalse x) (isFalse y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun FOr ((x (TValue Bool)) (y (TValue Bool))) (TValue Bool)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (or (isTrue x) (isTrue y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false true true)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun FNot ((x (TValue Bool))) (TValue Bool)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (isTrue x)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (isFalse x)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (miss x)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence getEqualityFunctions() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(define-fun ");
    String _string = funID.EQUAL.toString();
    _builder.append(_string, "");
    _builder.append("Bool ((x (TValue Bool)) (y (TValue Bool))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (= (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_1 = funID.EQUAL.toString();
    _builder.append(_string_1, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (= (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_2 = funID.EQUAL.toString();
    _builder.append(_string_2, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (= (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence getIntFunctions() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("(define-fun isValInt ((x (TValue Int))) Bool");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (and (not (miss x)) (not (err x))) true false)");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string = funID.LESS.toString();
    String _replaceAll = _string.replaceAll("-", "");
    _builder.append(_replaceAll, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (< (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_1 = funID.LESS_EQ.toString();
    String _replaceAll_1 = _string_1.replaceAll("-", "");
    _builder.append(_replaceAll_1, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (<= (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_2 = funID.GREATER.toString();
    String _replaceAll_2 = _string_2.replaceAll("-", "");
    _builder.append(_replaceAll_2, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (> (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_3 = funID.GREATER_EQ.toString();
    String _replaceAll_3 = _string_3.replaceAll("-", "");
    _builder.append(_replaceAll_3, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue Int))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (>= (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_4 = funID.ADD.toString();
    _builder.append(_string_4, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue Int))) (TValue Int)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (and (isValInt x) (isValInt y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val (+ (val x) (val y)) false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0 false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0 true false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_5 = funID.SUBTRACT.toString();
    _builder.append(_string_5, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue Int))) (TValue Int)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (and (isValInt x) (isValInt y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val (- (val x) (val y)) false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0 false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0 true false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_6 = funID.MULTIPLY.toString();
    _builder.append(_string_6, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue Int))) (TValue Int)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (and (isValInt x) (isValInt y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val (* (val x) (val y)) false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0 false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0 true false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_7 = funID.DIVIDE.toString();
    _builder.append(_string_7, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue Int))) (TValue Int)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (and (isValInt x) (isValInt y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val (div (val x) (val y)) false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0 false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0 true false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence getRealFunctions() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("(define-fun isValReal ((x (TValue Real))) Bool");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (and (not (miss x)) (not (err x))) true false)");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string = funID.LESS.toString();
    String _replaceAll = _string.replaceAll("-", "");
    _builder.append(_replaceAll, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (< (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_1 = funID.LESS_EQ.toString();
    String _replaceAll_1 = _string_1.replaceAll("-", "");
    _builder.append(_replaceAll_1, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (<= (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_2 = funID.GREATER.toString();
    String _replaceAll_2 = _string_2.replaceAll("-", "");
    _builder.append(_replaceAll_2, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (> (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_3 = funID.GREATER_EQ.toString();
    String _replaceAll_3 = _string_3.replaceAll("-", "");
    _builder.append(_replaceAll_3, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue Real))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (>= (val x) (val y))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_4 = funID.ADD.toString();
    _builder.append(_string_4, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue Real))) (TValue Real)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (and (isValReal x) (isValReal y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val (+ (val x) (val y)) false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0.0 false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0.0 true false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_5 = funID.SUBTRACT.toString();
    _builder.append(_string_5, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue Real))) (TValue Real)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (and (isValReal x) (isValReal y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val (- (val x) (val y)) false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0.0 false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0.0 true false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_6 = funID.MULTIPLY.toString();
    _builder.append(_string_6, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue Real))) (TValue Real)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (and (isValReal x) (isValReal y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val (* (val x) (val y)) false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0.0 false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0.0 true false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_7 = funID.DIVIDE.toString();
    _builder.append(_string_7, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue Real))) (TValue Real)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (and (isValReal x) (isValReal y))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val (/ (val x) (val y)) false false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (err x) (err y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0.0 false true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val 0.0 true false)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence getSetFunctions() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(define-fun isValSetInt ((x (TValue (Set Int)))) Bool");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (and (not (miss x)) (not (err x))) true false)");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun isValSetReal ((x (TValue (Set Real)))) Bool");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (and (not (miss x)) (not (err x))) true false)");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun isValSetBool ((x (TValue (Set Bool)))) Bool");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(ite (and (not (miss x)) (not (err x))) true false)");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string = funID.IN.toString();
    _builder.append(_string, "");
    _builder.append("Bool ((x (TValue Bool)) (y (TValue (Set Bool)))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x)(err y)) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (exists ((i Int))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("(= (val x) (select (val y) i))");
    _builder.newLine();
    _builder.append("\t\t\t\t  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_1 = funID.IN.toString();
    _builder.append(_string_1, "");
    _builder.append("Real ((x (TValue Real)) (y (TValue (Set Real)))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x)(err y)) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (exists ((i Int))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("(= (val x) (select (val y) i))");
    _builder.newLine();
    _builder.append("\t\t\t\t  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("(define-fun ");
    String _string_2 = funID.IN.toString();
    _builder.append(_string_2, "");
    _builder.append("Int ((x (TValue Int)) (y (TValue (Set Int)))) (TValue Bool)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(ite (or (err x)(err y)) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(mk-val false false true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(ite (or (miss x) (miss y))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(mk-val false true false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(ite (exists ((i Int))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("(= (val x) (select (val y) i))");
    _builder.newLine();
    _builder.append("\t\t\t\t  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val true false false)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(mk-val false false false)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    return _builder;
  }
}
